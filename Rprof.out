sample.interval=20000
"pmatch" ".deparseOpts" "deparse" "mode" "match" "%in%" "deparse" "paste" "force" "as.data.frame.integer" "as.data.frame" "data.frame" "inFunction" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "index.search" "help" "<Anonymous>" 
"of1" "writeBlock" "writeContent" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"fsub" "htmlify" "isBlankLineRd" "addParaBreaks" "writeLines" "writeLinesUTF8" "of1" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"readLines" "paste" "<Anonymous>" "<Anonymous>" 
"defaultHandler" "doWithOneRestart" "withOneRestart" "withRestarts" "message" "printmessage" "make.simmap" 
"pmatch" ".deparseOpts" "deparse" "eval" "match.arg" "match" "encodeString" "str.default" "str" "<Anonymous>" "do.call" "strSub" "str.default" "str" "<Anonymous>" "do.call" "strSub" "str.default" "str" "<Anonymous>" "do.call" "strSub" "str.default" "str" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" "eval" "eval" "withVisible" "evalVis" "capture.output" ".rs.valueFromStr" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" ".rs.valueContents" "<Anonymous>" 
"eval" "FUN" "lapply" "strSub" "str.default" "str" "<Anonymous>" "do.call" "strSub" "str.default" "str" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" "eval" "eval" "withVisible" "evalVis" "capture.output" ".rs.valueFromStr" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" ".rs.valueContents" "<Anonymous>" 
"prettyNum" "format.default" "format" "format.fun" "paste" "formObj" "cat" "str.default" "str" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" "eval" "eval" "withVisible" "evalVis" "capture.output" ".rs.valueFromStr" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" ".rs.valueAsString" "<Anonymous>" 
"vcv.phylo" "vcvSplit" "mvSIM" 
"[" "factor" "FUN" "lapply" "unlist" "rev" "FUN" "lapply" "mv.Precalc" "mvSIM" 
"$<-" "prop.part" "vcv.phylo" "vcvSplit" "mvSIM" 
"rev.default" "rev" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t.default" "t" "standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"colnames<-" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"lower.tri" "standardGeneric" "lower.tri" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attributes" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"mode" "attr.all.equal" "all.equal.character" "attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"rownames" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "lower.tri" "standardGeneric" "lower.tri" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix.default" "as.matrix" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"get" "getExportedValue" "::" "tcrossprod" "standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"nrow" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"mode" "data.class" "all.equal.character" "attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"diag" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "unname" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"mode" "attr.all.equal" "all.equal.character" "attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"<Anonymous>" "tcrossprod" "standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"nrow" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"diag" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "tcrossprod" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"order" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"asNamespace" "getExportedValue" "::" "tcrossprod" "standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.vector" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"data.class" "all.equal.character" "attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"is.matrix" "diag" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "unname" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"*" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"<Anonymous>" "tcrossprod" "standardGeneric" "tcrossprod" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"is.qr" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"mode" "attr.all.equal" "all.equal.numeric" "all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"determinant.matrix" "<Anonymous>" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"rownames" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix.default" "as.matrix" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"diag" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "lower.tri" "standardGeneric" "lower.tri" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"rev" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"getNamespace" "asNamespace" "getExportedValue" "::" "tcrossprod" "standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "lower.tri" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"unname" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"rev" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "as.matrix" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"order" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"data.class" "all.equal.numeric" "all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.character" "attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"getNamespace" "asNamespace" "getExportedValue" "::" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"::" "tcrossprod" "standardGeneric" "tcrossprod" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"col" "lower.tri" "standardGeneric" "lower.tri" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"<Anonymous>" "tcrossprod" "standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.character" "attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"::" "tcrossprod" "standardGeneric" "tcrossprod" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"unname" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"is.matrix" "as.matrix.default" "as.matrix" "lower.tri" "standardGeneric" "lower.tri" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.numeric" "all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "lower.tri" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"get" "getExportedValue" "::" "tcrossprod" "standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"mode" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t.default" "t" "standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "mode" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"<Anonymous>" "tcrossprod" "standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"mode" "attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"diag" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.numeric" "all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"determinant.matrix" "<Anonymous>" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"$" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"is.expression" "mode" "data.class" "all.equal.numeric" "all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"isBaseNamespace" "getExportedValue" "::" "tcrossprod" "standardGeneric" "tcrossprod" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "standardGeneric" "as.matrix" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"<Anonymous>" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"nrow" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix.default" "as.matrix" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"mode" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"mode" "data.class" "all.equal.numeric" "all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"determinant.matrix" "<Anonymous>" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"diag" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"is.array" "diag" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"diag" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "lower.tri" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "lower.tri" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "standardGeneric" "as.matrix" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "lower.tri" "standardGeneric" "lower.tri" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "lower.tri" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"$" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.numeric" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"mode" "attr.all.equal" "all.equal.character" "attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.character" "attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "unname" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"order" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"determinant.matrix" "<Anonymous>" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"mode" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"asNamespace" "getExportedValue" "::" "tcrossprod" "standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"list" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"<Anonymous>" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"mode" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"rev" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"data.class" "all.equal.character" "attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.character" "::" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"diag" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"<Anonymous>" ".External2" "optim" "mvOU2" 
"length" "order" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "lower.tri" "standardGeneric" "lower.tri" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"getExportedValue" "::" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.numeric" "all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "tcrossprod" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "lower.tri" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "mode" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"$" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"lapply" "unlist" "order" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.character" "::" "tcrossprod" "standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrix" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"==" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"determinant.matrix" "<Anonymous>" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"rownames" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"::" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"is.matrix" "as.matrix.default" "as.matrix" "standardGeneric" "as.matrix" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attributes" "attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"<Anonymous>" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"rownames" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"rownames" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"<Anonymous>" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"<Anonymous>" "tcrossprod" "standardGeneric" "tcrossprod" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"sqrt" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"get" "getExportedValue" "::" "tcrossprod" "standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.numeric" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t.default" "t" "standardGeneric" "t" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"mode" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.numeric" "all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"rev" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"diag" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"is.qr" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"lower.tri" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"get" "getExportedValue" "::" "tcrossprod" "standardGeneric" "tcrossprod" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"$" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"unlist" "order" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.character" "attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"match.fun" "lapply" "unlist" "order" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"nrow" "diag" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"diag" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"determinant.matrix" "<Anonymous>" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attributes" "attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.numeric" "all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"rev" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"getNamespace" "asNamespace" "getExportedValue" "::" "tcrossprod" "standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"rev" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"tcrossprod" "standardGeneric" "tcrossprod" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "tcrossprod" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"rev" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"determinant.matrix" "<Anonymous>" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"row" "lower.tri" "standardGeneric" "lower.tri" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "lower.tri" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix.default" "as.matrix" "lower.tri" "standardGeneric" "lower.tri" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix.default" "as.matrix" "standardGeneric" "as.matrix" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"asNamespace" "getExportedValue" "::" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.numeric" "all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrix" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix.default" "as.matrix" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"getExportedValue" "::" "tcrossprod" "standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "standardGeneric" "as.matrix" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"get" "getExportedValue" "::" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t.default" "t" "standardGeneric" "t" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t.default" "t" "mode" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"order" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"get" "getExportedValue" "::" "tcrossprod" "standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"diag" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "lower.tri" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"rev.default" "rev" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "lower.tri" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "standardGeneric" "as.matrix" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"asNamespace" "getExportedValue" "::" "tcrossprod" "standardGeneric" "tcrossprod" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"rev" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"*" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t.default" "t" "standardGeneric" "t" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "mode" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.character" "attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"asNamespace" "getExportedValue" "::" "tcrossprod" "standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"rev" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"order" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.character" "attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"list" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"rev" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"<Anonymous>" "tcrossprod" "standardGeneric" "tcrossprod" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"rev.default" "rev" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrix" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "lower.tri" "standardGeneric" "lower.tri" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"order" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"get" "getExportedValue" "::" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"determinant.matrix" "<Anonymous>" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"<Anonymous>" ".External2" "optim" "mvOU2" 
"determinant.matrix" "<Anonymous>" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"rev" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrix" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.integer" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"nrow" "determinant.matrix" "<Anonymous>" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"isTRUE" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.numeric" "all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "as.matrix" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"NROW" "rownames" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"is.finite" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"rev" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"*" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.character" "attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t.default" "t" "standardGeneric" "t" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t.default" "t" "standardGeneric" "t" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"nrow" "diag" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"$" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"isNamespace" "asNamespace" "getExportedValue" "::" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "lower.tri" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "lower.tri" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t.default" "t" "mode" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"mode" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"determinant.matrix" "<Anonymous>" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"isTRUE" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"mode" "attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"rev" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.numeric" "all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"rev" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "lower.tri" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"col" "lower.tri" "standardGeneric" "lower.tri" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "lower.tri" "standardGeneric" "lower.tri" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "lower.tri" "standardGeneric" "lower.tri" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"data.class" "all.equal.character" "attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"order" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "standardGeneric" "as.matrix" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"diag" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "standardGeneric" "as.matrix" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.vector" "all.equal.numeric" "all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"isBaseNamespace" "getExportedValue" "::" "tcrossprod" "standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"rownames" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"rownames" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.character" "attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "lower.tri" "standardGeneric" "lower.tri" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"<Anonymous>" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"length" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "as.matrix" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"lower.tri" "standardGeneric" "lower.tri" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"determinant.matrix" "<Anonymous>" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"$" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"asNamespace" "getExportedValue" "::" "tcrossprod" "standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"mode" "attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"rownames" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"asNamespace" "getExportedValue" "::" "tcrossprod" "standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"lapply" "unlist" "order" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "lower.tri" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"$" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"rev" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"getNamespace" "asNamespace" "getExportedValue" "::" "tcrossprod" "standardGeneric" "tcrossprod" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix.default" "as.matrix" "standardGeneric" "as.matrix" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"rownames" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "standardGeneric" "as.matrix" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "unname" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attributes" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"<Anonymous>" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "lower.tri" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"isTRUE" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrix" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"nrow" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"<Anonymous>" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "lower.tri" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"is.qr" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "standardGeneric" "as.matrix" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"mode" "data.class" "all.equal.numeric" "all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"list" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "standardGeneric" "as.matrix" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"get" "getExportedValue" "::" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "lower.tri" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attributes" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attributes" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "tcrossprod" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"diag" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "as.matrix" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.character" "attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "lower.tri" "standardGeneric" "lower.tri" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"mode" "attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"$" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "tcrossprod" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"order" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "tcrossprod" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"tcrossprod" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"mode" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"order" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "standardGeneric" "as.matrix" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.numeric" "all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"colnames<-" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "as.matrix" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"lapply" "unlist" "order" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"rownames" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"determinant.matrix" "<Anonymous>" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "lower.tri" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"array" "as.matrix.default" "as.matrix" "standardGeneric" "as.matrix" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"unlist" "order" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"lapply" "unlist" "order" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"array" "as.matrix.default" "as.matrix" "standardGeneric" "as.matrix" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"seq_len" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"array" "as.matrix.default" "as.matrix" "standardGeneric" "as.matrix" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"::" "tcrossprod" "standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "lower.tri" "standardGeneric" "lower.tri" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"*" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.numeric" "all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"getExportedValue" "::" "tcrossprod" "standardGeneric" "tcrossprod" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix.default" "as.matrix" "lower.tri" "standardGeneric" "lower.tri" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "lower.tri" "standardGeneric" "lower.tri" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"nrow" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "mode" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "as.matrix" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"asNamespace" "getExportedValue" "::" "tcrossprod" "standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "lower.tri" "standardGeneric" "lower.tri" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "as.matrix" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "standardGeneric" "as.matrix" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "lower.tri" "standardGeneric" "lower.tri" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "tcrossprod" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.numeric" "all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"mode" "attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"mode" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"get" "getExportedValue" "::" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.numeric" "all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"row" "lower.tri" "standardGeneric" "lower.tri" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"-" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"order" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"mode" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"rev" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"is.factor" "order" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"length" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"lapply" "unlist" "order" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "as.matrix" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"data.class" "all.equal.numeric" "all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"getExportedValue" "::" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"diag" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"is.factor" "order" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"getNamespace" "asNamespace" "getExportedValue" "::" "tcrossprod" "standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "as.matrix" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"getExportedValue" "::" "tcrossprod" "standardGeneric" "tcrossprod" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t.default" "t" "standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"getNamespace" "asNamespace" "getExportedValue" "::" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"getNamespace" "asNamespace" "getExportedValue" "::" "tcrossprod" "standardGeneric" "tcrossprod" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"data.class" "all.equal.character" "attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"lower.tri" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"get" "getExportedValue" "::" "tcrossprod" "standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"mode" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"data.class" "all.equal.numeric" "all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"col" "lower.tri" "standardGeneric" "lower.tri" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"lower.tri" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "standardGeneric" "as.matrix" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"diag" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "standardGeneric" "as.matrix" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.numeric" "all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrix" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"::" "tcrossprod" "standardGeneric" "tcrossprod" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"determinant.matrix" "<Anonymous>" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"lower.tri" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t.default" "t" "standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"get" "getExportedValue" "::" "tcrossprod" "standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "standardGeneric" "as.matrix" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.numeric" "all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"nrow" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"length" "data.class" "all.equal.character" "attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"rownames" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"::" "tcrossprod" "standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"any" "all.equal.character" "attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "lower.tri" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"unname" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "lower.tri" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"determinant.matrix" "<Anonymous>" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"rev" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"isBaseNamespace" "getExportedValue" "::" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"is.expression" "mode" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "as.matrix" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "mode" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"col" "lower.tri" "standardGeneric" "lower.tri" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "lower.tri" "standardGeneric" "lower.tri" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"$" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"::" "tcrossprod" "standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"is.qr" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.character" "attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "lower.tri" "standardGeneric" "lower.tri" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"<Anonymous>" "tcrossprod" "standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"get" "getExportedValue" "::" "tcrossprod" "standardGeneric" "tcrossprod" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"rev" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrix" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"determinant.matrix" "<Anonymous>" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"row" "lower.tri" "standardGeneric" "lower.tri" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrix" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "unname" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.character" "::" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"isBaseNamespace" "getExportedValue" "::" "tcrossprod" "standardGeneric" "tcrossprod" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"*" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"data.class" "all.equal.character" "attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"determinant.matrix" "<Anonymous>" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"mode" "attr.all.equal" "all.equal.numeric" "all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "unname" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"order" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "lower.tri" "standardGeneric" "lower.tri" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "tcrossprod" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"mode" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "lower.tri" "standardGeneric" "lower.tri" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "as.matrix" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "unname" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"lapply" "unlist" "order" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "mode" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"nrow" "diag" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "lower.tri" "standardGeneric" "lower.tri" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "lower.tri" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"::" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"get" "getExportedValue" "::" "tcrossprod" "standardGeneric" "tcrossprod" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"isBaseNamespace" "getExportedValue" "::" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"$" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"mode" "attr.all.equal" "all.equal.numeric" "all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"order" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "lower.tri" "standardGeneric" "lower.tri" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "lower.tri" "standardGeneric" "lower.tri" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"is.atomic" "array" "as.matrix.default" "as.matrix" "standardGeneric" "as.matrix" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "lower.tri" "standardGeneric" "lower.tri" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "standardGeneric" "as.matrix" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"get" "getExportedValue" "::" "tcrossprod" "standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"col" "lower.tri" "standardGeneric" "lower.tri" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.character" "attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"::" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"isBaseNamespace" "getExportedValue" "::" "tcrossprod" "standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"isBaseNamespace" "getExportedValue" "::" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"get" "getExportedValue" "::" "tcrossprod" "standardGeneric" "tcrossprod" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "as.matrix" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"row" "lower.tri" "standardGeneric" "lower.tri" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "as.matrix" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"get" "getExportedValue" "::" "tcrossprod" "standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.numeric" "all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"isBaseNamespace" "getExportedValue" "::" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"unname" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"names" "attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix.default" "as.matrix" "unname" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.character" "attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "unname" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"get" "getExportedValue" "::" "tcrossprod" "standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"is.numeric" "all.equal.numeric" "all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrix" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "unname" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"::" "tcrossprod" "standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"unlist" "order" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"get" "getExportedValue" "::" "tcrossprod" "standardGeneric" "tcrossprod" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"*" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"==" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"unname" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"mode" "attr.all.equal" "all.equal.numeric" "all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"lapply" "unlist" "order" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"::" "tcrossprod" "standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "lower.tri" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"mode" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"mode" "data.class" "all.equal.numeric" "all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "as.matrix" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.numeric" "all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"<Anonymous>" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "lower.tri" "standardGeneric" "lower.tri" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "lower.tri" "standardGeneric" "lower.tri" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"rev" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"row" "lower.tri" "standardGeneric" "lower.tri" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"array" "as.matrix.default" "as.matrix" "standardGeneric" "as.matrix" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "unname" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"getNamespace" "asNamespace" "getExportedValue" "::" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"diag" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrix" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"asNamespace" "getExportedValue" "::" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "unname" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "as.matrix" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"is.data.frame" "colnames<-" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"diag" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"getExportedValue" "::" "tcrossprod" "standardGeneric" "tcrossprod" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"rev" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "lower.tri" "standardGeneric" "lower.tri" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "as.matrix" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"FUN" "lapply" "unlist" "order" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "unname" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"diag" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"<Anonymous>" "tcrossprod" "standardGeneric" "tcrossprod" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"mode" "attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"mode" "data.class" "all.equal.character" "attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.numeric" "all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix.default" "as.matrix" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "lower.tri" "standardGeneric" "lower.tri" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.integer" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"data.class" "all.equal.numeric" "all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "mode" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrix" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"is.call" "mode" "attr.all.equal" "all.equal.numeric" "all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"unlist" "order" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "lower.tri" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t.default" "t" "standardGeneric" "t" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"is.data.frame" "colnames<-" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"determinant.matrix" "<Anonymous>" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"mode" "attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "standardGeneric" "as.matrix" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"get" "getExportedValue" "::" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"<Anonymous>" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"determinant.matrix" "<Anonymous>" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "unname" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"<Anonymous>" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"is.factor" "order" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"is.factor" "order" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"get" "getExportedValue" "::" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"data.class" "all.equal.numeric" "all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"order" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrix" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"array" "as.matrix.default" "as.matrix" "standardGeneric" "as.matrix" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "tcrossprod" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "mode" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "standardGeneric" "as.matrix" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "as.matrix" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "lower.tri" "standardGeneric" "lower.tri" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"diag" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"mode" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"seq_len" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"is.infinite" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "standardGeneric" "as.matrix" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"isBaseNamespace" "getExportedValue" "::" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "standardGeneric" "as.matrix" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.character" "attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"sqrt" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "lower.tri" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "unname" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrix" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"any" "order" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"any" "order" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"mode" "data.class" "all.equal.numeric" "all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"nrow" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"mode" "attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "lower.tri" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"mode" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.character" "attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"is.qr" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "lower.tri" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"data.class" "all.equal.numeric" "all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"diag" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t.default" "t" "standardGeneric" "t" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"isNamespace" "asNamespace" "getExportedValue" "::" "tcrossprod" "standardGeneric" "tcrossprod" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"rownames" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t.default" "t" "standardGeneric" "t" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"$" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"lower.tri" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"lapply" "unlist" "order" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrix" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"is.qr" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"<Anonymous>" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "lower.tri" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"col" "lower.tri" "standardGeneric" "lower.tri" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "unname" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"row" "lower.tri" "standardGeneric" "lower.tri" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "lower.tri" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"lower.tri" "standardGeneric" "lower.tri" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"determinant.matrix" "<Anonymous>" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "lower.tri" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"determinant.matrix" "<Anonymous>" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "tcrossprod" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"order" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "tcrossprod" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrix" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.character" "::" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"lower.tri" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "mode" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"determinant.matrix" "<Anonymous>" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"rev" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"rev" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"asNamespace" "getExportedValue" "::" "tcrossprod" "standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"length" "data.class" "all.equal.character" "attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"is.infinite" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"diag" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"oldClass" "data.class" "all.equal.character" "attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.character" "attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"lower.tri" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.character" "attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"data.class" "all.equal.numeric" "all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"get" "getExportedValue" "::" "tcrossprod" "standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"diag" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "lower.tri" "standardGeneric" "lower.tri" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"$" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.numeric" "all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"get" "getExportedValue" "::" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"length" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "standardGeneric" "as.matrix" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"order" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"seq_len" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "lower.tri" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all" "all.equal.numeric" "all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "lower.tri" "standardGeneric" "lower.tri" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "lower.tri" "standardGeneric" "lower.tri" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"get" "getExportedValue" "::" "tcrossprod" "standardGeneric" "tcrossprod" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "mode" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "mode" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"is.null" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.character" "attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"rev.default" "rev" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "mode" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"unlist" "order" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "lower.tri" "standardGeneric" "lower.tri" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"row" "lower.tri" "standardGeneric" "lower.tri" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"mode" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"lapply" "unlist" "order" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.numeric" "all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"data.class" "all.equal.character" "attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "lower.tri" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"rownames" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "lower.tri" "standardGeneric" "lower.tri" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"diag" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.numeric" "all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"<Anonymous>" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"rev" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"colnames<-" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "unname" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"<Anonymous>" "tcrossprod" "standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"asNamespace" "getExportedValue" "::" "tcrossprod" "standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "lower.tri" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.numeric" "all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"::" "tcrossprod" "standardGeneric" "tcrossprod" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"rev" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "unname" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"NROW" "rownames" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"get" "getExportedValue" "::" "tcrossprod" "standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"is.data.frame" "colnames<-" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"asNamespace" "getExportedValue" "::" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"length" "all.equal.character" "attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "unname" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "as.matrix" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"NROW" "rownames" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"determinant.matrix" "<Anonymous>" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"get" "getExportedValue" "::" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"determinant.matrix" "<Anonymous>" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"determinant.matrix" "<Anonymous>" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"determinant.matrix" "<Anonymous>" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"isNamespace" "asNamespace" "getExportedValue" "::" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"array" "as.matrix.default" "as.matrix" "standardGeneric" "as.matrix" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t.default" "t" "standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"rev" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "unname" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"asNamespace" "getExportedValue" "::" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"is.atomic" "matrix" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.numeric" "all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"+" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"names" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"diag" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "lower.tri" "standardGeneric" "lower.tri" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "lower.tri" "standardGeneric" "lower.tri" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"determinant.matrix" "<Anonymous>" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"determinant.matrix" "<Anonymous>" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix.default" "as.matrix" "unname" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"mode" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"<Anonymous>" "tcrossprod" "standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"mode" "data.class" "all.equal.numeric" "all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "lower.tri" "standardGeneric" "lower.tri" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"mode" "attr.all.equal" "all.equal.character" "attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"get" "getExportedValue" "::" "tcrossprod" "standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"==" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"get" "getExportedValue" "::" "tcrossprod" "standardGeneric" "tcrossprod" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"diag" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.character" "::" "tcrossprod" "standardGeneric" "tcrossprod" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"is.na" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"getNamespace" "asNamespace" "getExportedValue" "::" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"data.class" "all.equal.character" "attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"rownames" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t.default" "t" "standardGeneric" "t" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"oldClass" "data.class" "all.equal.character" "attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.vector" "all.equal.numeric" "all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "unname" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "unname" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "lower.tri" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"lower.tri" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attributes" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "standardGeneric" "as.matrix" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.numeric" "all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"NROW" "rownames" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"getNamespace" "asNamespace" "getExportedValue" "::" "tcrossprod" "standardGeneric" "tcrossprod" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix.default" "as.matrix" "lower.tri" "standardGeneric" "lower.tri" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"rev" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"mode" "attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"is.matrix" "as.matrix.default" "as.matrix" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"lower.tri" "standardGeneric" "lower.tri" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"lapply" "unlist" "order" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"determinant.matrix" "<Anonymous>" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrix" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "standardGeneric" "as.matrix" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"is.expression" "mode" "attr.all.equal" "all.equal.character" "attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "tcrossprod" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"rev" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"rev" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"nrow" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"order" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t.default" "t" "standardGeneric" "t" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"is.finite" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t.default" "t" "standardGeneric" "t" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "lower.tri" "standardGeneric" "lower.tri" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t.default" "t" "standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "lower.tri" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"col" "lower.tri" "standardGeneric" "lower.tri" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"<Anonymous>" "tcrossprod" "standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"mode" "attr.all.equal" "all.equal.numeric" "all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "lower.tri" "standardGeneric" "lower.tri" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"determinant.matrix" "<Anonymous>" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"get" "getExportedValue" "::" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"is.factor" "order" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"mode" "attr.all.equal" "all.equal.numeric" "all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t.default" "t" "mode" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"is.qr" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "standardGeneric" "as.matrix" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"unlist" "order" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.numeric" "all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"diag" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"data.class" "all.equal.character" "attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"is.numeric" "all.equal.numeric" "all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "lower.tri" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "lower.tri" "standardGeneric" "lower.tri" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "lower.tri" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "unname" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.numeric" "all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"diag" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "lower.tri" "standardGeneric" "lower.tri" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "mode" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"rev" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"determinant.matrix" "<Anonymous>" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"<Anonymous>" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attributes" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t.default" "t" "standardGeneric" "t" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"is.expression" "mode" "attr.all.equal" "all.equal.character" "attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t.default" "t" "standardGeneric" "t" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"is.function" "match.fun" "lapply" "unlist" "order" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "lower.tri" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"determinant.matrix" "<Anonymous>" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"determinant.matrix" "<Anonymous>" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"determinant.matrix" "<Anonymous>" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"<Anonymous>" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"colnames<-" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"diag" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"getExportedValue" "::" "tcrossprod" "standardGeneric" "tcrossprod" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "standardGeneric" "as.matrix" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"getNamespace" "asNamespace" "getExportedValue" "::" "tcrossprod" "standardGeneric" "tcrossprod" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"diag" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "tcrossprod" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "as.matrix" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "standardGeneric" "as.matrix" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"unname" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"FUN" "lapply" "unlist" "order" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrix" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"determinant.matrix" "<Anonymous>" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"rev" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"mode" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"sqrt" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"determinant.matrix" "<Anonymous>" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "mode" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"<Anonymous>" "tcrossprod" "standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.character" "attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"determinant.matrix" "<Anonymous>" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"$" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "lower.tri" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"<Anonymous>" "tcrossprod" "standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"rev" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"lapply" "unlist" "order" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"determinant.matrix" "<Anonymous>" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"array" "as.matrix.default" "as.matrix" "standardGeneric" "as.matrix" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"array" "as.matrix.default" "as.matrix" "standardGeneric" "as.matrix" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"data.class" "all.equal.character" "attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"determinant.matrix" "<Anonymous>" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"determinant.matrix" "<Anonymous>" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "standardGeneric" "as.matrix" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"row" "lower.tri" "standardGeneric" "lower.tri" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"lower.tri" "standardGeneric" "lower.tri" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "standardGeneric" "as.matrix" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "unname" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "as.matrix" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"col" "lower.tri" "standardGeneric" "lower.tri" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrix" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"is.matrix" "as.matrix.default" "as.matrix" "lower.tri" "standardGeneric" "lower.tri" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"determinant.matrix" "<Anonymous>" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"any" "all.equal.character" "attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "lower.tri" "standardGeneric" "lower.tri" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"lower.tri" "standardGeneric" "lower.tri" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "lower.tri" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "standardGeneric" "as.matrix" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "standardGeneric" "as.matrix" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"isBaseNamespace" "getExportedValue" "::" "tcrossprod" "standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"determinant.matrix" "<Anonymous>" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t.default" "t" "standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"unlist" "order" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "standardGeneric" "as.matrix" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"rev" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "lower.tri" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"dim" "row" "lower.tri" "standardGeneric" "lower.tri" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"-" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"diag" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"any" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.numeric" "all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"getExportedValue" "::" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"length" "data.class" "all.equal.character" "attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"determinant.matrix" "<Anonymous>" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"determinant.matrix" "<Anonymous>" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"format" "str.default" "str" "<Anonymous>" "do.call" "strSub" "str.default" "str" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" "eval" "eval" "withVisible" "evalVis" "capture.output" ".rs.valueFromStr" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" ".rs.valueContents" "<Anonymous>" 
"f" 
":" "f" 
"<=" "<Anonymous>" "do.call" "try_params" "do.call" 
"getNamespace" 
".External2" "plot.new" "plot.default" "plot.phylo" "plot" 
"close.connection" "close" "save" "<Anonymous>" 
".External" "<Anonymous>" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" 
"standardGeneric" "which" "<Anonymous>" "do.call" "try_params" "do.call" 
"<Anonymous>" "do.call" "try_params" "do.call" 
"standardGeneric" "rbind" "cbind" "standardGeneric" "cbind" "standardGeneric" "solve" 
"standardGeneric" "rbind" "cbind" "standardGeneric" "cbind" "standardGeneric" "solve" 
"ifelse" "paste0" "str.default" "str" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" "eval" "eval" "withVisible" "evalVis" "capture.output" ".rs.valueFromStr" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" ".rs.valueDescription" "<Anonymous>" 
"any" "prettyNum" "format.default" "format" "format.fun" "paste" "formObj" "cat" "str.default" "str" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" "eval" "eval" "withVisible" "evalVis" "capture.output" ".rs.valueFromStr" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" ".rs.valueDescription" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"exists" "FUN" "lapply" "sapply" ".rs.which" "sub" "<Anonymous>" 
"gregexpr" "withCallingHandlers" "suppressWarnings" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"index.search" "help" "<Anonymous>" 
"psub" "htmlify" "isBlankLineRd" "addParaBreaks" "writeLines" "writeLinesUTF8" "of1" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"sub" "data.frame" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"anyDuplicated.default" "anyDuplicated" "data.frame" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"apply" "find.package" "index.search" "help" "<Anonymous>" 
"gc" "system.time" 
"gc" "system.time" 
"gc" "system.time" 
"gc" "system.time" 
"gc" "system.time" 
"gc" "system.time" 
"gc" "system.time" 
"gc" "system.time" 
"eval" "FUN" "lapply" "strSub" "str.default" "str" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" "eval" "eval" "withVisible" "evalVis" "capture.output" ".rs.valueFromStr" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" ".rs.valueContents" "<Anonymous>" 
"gc" "system.time" 
"gc" "system.time" 
"gc" "system.time" 
"gc" "system.time" 
"gc" "system.time" 
"gc" "system.time" 
"gc" "system.time" 
"lapply" "sapply" "specialOpLocs" "<Anonymous>" "<Anonymous>" 
"gc" "system.time" 
"gc" "system.time" 
"gc" "system.time" 
"gc" "system.time" 
"gc" "system.time" 
"gc" "system.time" 
"gc" "system.time" 
"gc" "system.time" 
"gc" "system.time" 
"gc" "system.time" 
"gc" "system.time" 
"gc" "system.time" 
"gc" "system.time" 
"gc" "system.time" 
"gc" "system.time" 
"gc" "system.time" 
"gc" "system.time" 
"gc" "system.time" 
"gc" "system.time" 
"gc" "system.time" 
"gc" "system.time" 
"gc" "system.time" 
"gc" "system.time" 
"gc" "system.time" 
"gc" "system.time" 
"gc" "system.time" 
"gc" "system.time" 
"gc" "system.time" 
"which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"vcv.phylo" "vcv" 
"gc" "system.time" 
"gc" "system.time" 
"gc" "system.time" 
"gc" "system.time" 
"gc" "system.time" 
"gc" "system.time" 
"<=" "<Anonymous>" "do.call" "system.time" 
"getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"foo" "foo" "foo" "foo" "foo" "foo" "foo" "foo" "foo" "foo" "foo" "foo" "rtree" "reorder" 
".Call" "prop.part" "vcv.phylo" "vcv" 
"matrix" "vcv.phylo" "vcv" 
"vcv.phylo" "vcv" 
"gc" "system.time" 
"gc" "system.time" 
"gc" "system.time" 
"gc" "system.time" 
"gc" "system.time" 
"gc" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"$" "standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"<Anonymous>" "do.call" "system.time" 
"$" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"<Anonymous>" "do.call" "system.time" 
"getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"gc" "system.time" 
"gc" "system.time" 
"gc" "system.time" 
"gc" "system.time" 
"gc" "system.time" 
"gc" "system.time" 
"gc" "system.time" 
"gc" "system.time" 
"getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"vcv.phylo" "vcv" 
"gc" "system.time" 
"gc" "system.time" 
"gc" "system.time" 
"gc" "system.time" 
"gc" "system.time" 
"gc" "system.time" 
"getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"$" "standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"$" "which" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"c" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
".Call" "prop.part" "vcv.phylo" "vcv" 
"matrix" "vcv.phylo" "vcv" 
"vcv.phylo" "vcv" 
"gc" "system.time" 
"gc" "system.time" 
"gc" "system.time" 
"gc" "system.time" 
"gc" "system.time" 
"gc" "system.time" 
"gc" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"$" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"<Anonymous>" "do.call" "system.time" 
"==" "standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
">" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"$" "which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
".Call" "prop.part" "vcv.phylo" "vcv" 
".Call" "prop.part" "vcv.phylo" "vcv" 
".Call" "prop.part" "vcv.phylo" "vcv" 
".Call" "prop.part" "vcv.phylo" "vcv" 
"matrix" "vcv.phylo" "vcv" 
"matrix" "vcv.phylo" "vcv" 
"vcv.phylo" "vcv" 
"vcv.phylo" "vcv" 
"vcv.phylo" "vcv" 
"vcv.phylo" "vcv" 
"gc" "system.time" 
"gc" "system.time" 
"gc" "system.time" 
"gc" "system.time" 
"gc" "system.time" 
"gc" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"c" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"$" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"$" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"$" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
":" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"==" "standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"$" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"<Anonymous>" "do.call" "system.time" 
"standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"$" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"$" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"sample.int" "foo" "foo" "foo" "foo" "foo" "foo" "foo" "foo" "rtree" "reorder" 
".Call" "prop.part" "vcv.phylo" "vcv" 
".Call" "prop.part" "vcv.phylo" "vcv" 
".Call" "prop.part" "vcv.phylo" "vcv" 
".Call" "prop.part" "vcv.phylo" "vcv" 
".Call" "prop.part" "vcv.phylo" "vcv" 
".Call" "prop.part" "vcv.phylo" "vcv" 
".Call" "prop.part" "vcv.phylo" "vcv" 
".Call" "prop.part" "vcv.phylo" "vcv" 
"matrix" "vcv.phylo" "vcv" 
"matrix" "vcv.phylo" "vcv" 
"matrix" "vcv.phylo" "vcv" 
"matrix" "vcv.phylo" "vcv" 
"matrix" "vcv.phylo" "vcv" 
"matrix" "vcv.phylo" "vcv" 
"matrix" "vcv.phylo" "vcv" 
"matrix" "vcv.phylo" "vcv" 
"matrix" "vcv.phylo" "vcv" 
"matrix" "vcv.phylo" "vcv" 
"matrix" "vcv.phylo" "vcv" 
"vcv.phylo" "vcv" 
"vcv.phylo" "vcv" 
"vcv.phylo" "vcv" 
"vcv.phylo" "vcv" 
"vcv.phylo" "vcv" 
"vcv.phylo" "vcv" 
"[[" "vcv.phylo" "vcv" 
"vcv.phylo" "vcv" 
"gc" "system.time" 
"gc" "system.time" 
"gc" "system.time" 
"gc" "system.time" 
"gc" "system.time" 
"gc" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"<Anonymous>" "do.call" "system.time" 
"getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"$" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"$" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"c" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"c" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"$" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"$" "which" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"==" "standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"==" "standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"$" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"==" "standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"$" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"$" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"c" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"$" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"$" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"$" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"<Anonymous>" "do.call" "system.time" 
"==" "standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"<Anonymous>" "do.call" "system.time" 
"==" "standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"$" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"$" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"==" "standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"==" "standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"$" "which" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"which" "standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"$" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"==" "standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"foo" "foo" "foo" "foo" "foo" "foo" "foo" "foo" "foo" "foo" "foo" "foo" "foo" "foo" "foo" "rtree" "reorder" 
"sample.int" "foo" "foo" "foo" "foo" "foo" "foo" "foo" "foo" "foo" "foo" "foo" "foo" "rtree" "reorder" 
".Call" "prop.part" "vcv.phylo" "vcv" 
".Call" "prop.part" "vcv.phylo" "vcv" 
".Call" "prop.part" "vcv.phylo" "vcv" 
".Call" "prop.part" "vcv.phylo" "vcv" 
".Call" "prop.part" "vcv.phylo" "vcv" 
".Call" "prop.part" "vcv.phylo" "vcv" 
".Call" "prop.part" "vcv.phylo" "vcv" 
".Call" "prop.part" "vcv.phylo" "vcv" 
".Call" "prop.part" "vcv.phylo" "vcv" 
".Call" "prop.part" "vcv.phylo" "vcv" 
".Call" "prop.part" "vcv.phylo" "vcv" 
".Call" "prop.part" "vcv.phylo" "vcv" 
".Call" "prop.part" "vcv.phylo" "vcv" 
".Call" "prop.part" "vcv.phylo" "vcv" 
".Call" "prop.part" "vcv.phylo" "vcv" 
".Call" "prop.part" "vcv.phylo" "vcv" 
".Call" "prop.part" "vcv.phylo" "vcv" 
".Call" "prop.part" "vcv.phylo" "vcv" 
".Call" "prop.part" "vcv.phylo" "vcv" 
".Call" "prop.part" "vcv.phylo" "vcv" 
".Call" "prop.part" "vcv.phylo" "vcv" 
".Call" "prop.part" "vcv.phylo" "vcv" 
"matrix" "vcv.phylo" "vcv" 
"matrix" "vcv.phylo" "vcv" 
"matrix" "vcv.phylo" "vcv" 
"matrix" "vcv.phylo" "vcv" 
"matrix" "vcv.phylo" "vcv" 
"matrix" "vcv.phylo" "vcv" 
"matrix" "vcv.phylo" "vcv" 
"matrix" "vcv.phylo" "vcv" 
"matrix" "vcv.phylo" "vcv" 
"matrix" "vcv.phylo" "vcv" 
"matrix" "vcv.phylo" "vcv" 
"matrix" "vcv.phylo" "vcv" 
"matrix" "vcv.phylo" "vcv" 
"matrix" "vcv.phylo" "vcv" 
"matrix" "vcv.phylo" "vcv" 
"matrix" "vcv.phylo" "vcv" 
"matrix" "vcv.phylo" "vcv" 
"matrix" "vcv.phylo" "vcv" 
"matrix" "vcv.phylo" "vcv" 
"matrix" "vcv.phylo" "vcv" 
"matrix" "vcv.phylo" "vcv" 
"matrix" "vcv.phylo" "vcv" 
"vcv.phylo" "vcv" 
"vcv.phylo" "vcv" 
"vcv.phylo" "vcv" 
"vcv.phylo" "vcv" 
"vcv.phylo" "vcv" 
"vcv.phylo" "vcv" 
"vcv.phylo" "vcv" 
"vcv.phylo" "vcv" 
"vcv.phylo" "vcv" 
"vcv.phylo" "vcv" 
"vcv.phylo" "vcv" 
"vcv.phylo" "vcv" 
"vcv.phylo" "vcv" 
"vcv.phylo" "vcv" 
"vcv.phylo" "vcv" 
"vcv.phylo" "vcv" 
"vcv.phylo" "vcv" 
"vcv.phylo" "vcv" 
"vcv.phylo" "vcv" 
"vcv.phylo" "vcv" 
"vcv.phylo" "vcv" 
"vcv.phylo" "vcv" 
"vcv.phylo" "vcv" 
"vcv.phylo" "vcv" 
"vcv.phylo" "vcv" 
"vcv.phylo" "vcv" 
"vcv.phylo" "vcv" 
"vcv.phylo" "vcv" 
"vcv.phylo" "vcv" 
"vcv.phylo" "vcv" 
"gc" "system.time" 
"gc" "system.time" 
"gc" "system.time" 
"gc" "system.time" 
"gc" "system.time" 
"gc" "system.time" 
"gc" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"$" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"$" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"c" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"$" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"c" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"c" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"$" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"$" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"c" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"==" "standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"$" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"$" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"==" "standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"==" "standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"$" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"c" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"$" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"c" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"$" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"min" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"==" "standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"==" "standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"==" "standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"$" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"$" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"==" "standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"$" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"which" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"which" "standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"$" "which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"$" "which" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"==" "standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"$" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"length" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"$" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"$" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"c" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"==" "standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"which" "standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"$" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"c" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"==" "standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"which" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"==" "standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"==" "standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"which" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"==" "standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"==" "standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"c" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
">" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"==" "standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"==" "standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"==" "which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"==" "standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"which" "getDescendants" "match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"==" "standardGeneric" "which" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"match" "<Anonymous>" "do.call" "system.time" 
"deparse" "eval" "match.arg" "format.default" "format" "format.fun" "paste" "formObj" "cat" "str.default" "str" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" "eval" "eval" "withVisible" "evalVis" "capture.output" ".rs.valueFromStr" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" ".rs.valueDescription" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"list" ".standard_regexps" "find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "<Anonymous>" "<Anonymous>" 
"lazyLoadDBfetch" "fetch" "fun" "lazyLoadDBexec" "<Anonymous>" "<Anonymous>" "prepare_Rd" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"strwrap" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"addParaBreaks" "writeLines" "writeLinesUTF8" "of1" "writeBlock" "writeContent" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"grep" "isBlankRd" "writeWrapped" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"psub" "htmlify" "isBlankLineRd" "addParaBreaks" "writeLines" "writeLinesUTF8" "of1" "writeBlock" "writeContent" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"psub" "htmlify" "isBlankLineRd" "addParaBreaks" "writeLines" "writeLinesUTF8" "of1" "writeBlock" "writeContent" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"fsub" "vhtmlify" "writeLines" "writeLinesUTF8" "of1" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"sprintf" "specialCompletions" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"sub" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"sub" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"is.factor" "unique.default" "unique" "simplify2array" "sapply" "specialOpLocs" "<Anonymous>" "<Anonymous>" 
"unique.default" "unique" "find.package" "index.search" "help" "eval" "eval" "?" 
"file.exists" "find.package" "index.search" "help" "eval" "eval" "?" 
"readRDS" "index.search" "help" "eval" "eval" "?" 
"readRDS" "index.search" "help" "eval" "eval" "?" 
"match" "%in%" "writeSection" "Rd2HTML" "<Anonymous>" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" 
"psub" "addParaBreaks" "writeLines" "writeLinesUTF8" "of1" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" 
"doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" ".rs.valueDescription" "<Anonymous>" 
"+" 
"options" "str.default" "str" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" "eval" "eval" "withVisible" "evalVis" "capture.output" ".rs.valueFromStr" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" ".rs.valueDescription" "<Anonymous>" 
"capture.output" ".rs.valueFromStr" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" ".rs.valueDescription" "<Anonymous>" 
"format" "format.fun" "paste" "formObj" "cat" "str.default" "str" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" "eval" "eval" "withVisible" "evalVis" "capture.output" ".rs.valueFromStr" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" ".rs.valueDescription" "<Anonymous>" 
"sub" "prettyNum" "format.default" "format" "format.fun" "paste" "formObj" "cat" "str.default" "str" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" "eval" "eval" "withVisible" "evalVis" "capture.output" ".rs.valueFromStr" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" ".rs.valueAsString" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"unique" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "<Anonymous>" "<Anonymous>" 
"gzfile" "readRDS" "<Anonymous>" "<Anonymous>" 
"gzfile" "readRDS" "lazyLoadDBexec" "<Anonymous>" "<Anonymous>" "prepare_Rd" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"lazyLoadDBfetch" "fetch" "fun" "lazyLoadDBexec" "<Anonymous>" "<Anonymous>" "prepare_Rd" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"grep" "isBlankLineRd" "addParaBreaks" "writeLines" "writeLinesUTF8" "of1" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"unlist" "apply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"readRDS" "lazyLoadDBexec" "<Anonymous>" "<Anonymous>" "prepare_Rd" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"fsub" "htmlify" "isBlankLineRd" "addParaBreaks" "writeLines" "writeLinesUTF8" "of1" "writeBlock" "writeContent" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"grep" "isBlankRd" "writeContent" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"grepl" "addParaBreaks" "writeLines" "writeLinesUTF8" "of1" "writeBlock" "writeContent" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"close.connection" "close" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"gregexpr" "FUN" "lapply" "sapply" "specialOpLocs" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"exists" "FUN" "lapply" "sapply" ".rs.which" "sub" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"getOption" "gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"find.package" "index.search" "help" "<Anonymous>" 
"unique" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
".External" "<Anonymous>" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" 
".External" "<Anonymous>" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" 
".External" "<Anonymous>" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" 
".External" "<Anonymous>" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" 
".External" "<Anonymous>" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" 
".External" "<Anonymous>" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" 
".External" "<Anonymous>" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" 
".External" "<Anonymous>" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" 
".External" "<Anonymous>" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" 
".External" "<Anonymous>" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" 
".External" "<Anonymous>" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" 
".External" "<Anonymous>" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" 
".External" "<Anonymous>" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" 
".External" "<Anonymous>" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" 
".External" "<Anonymous>" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" 
".External" "<Anonymous>" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" 
".External" "<Anonymous>" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" 
".External" "<Anonymous>" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" 
".External" "<Anonymous>" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" 
".External" "<Anonymous>" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" 
".External" "<Anonymous>" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" 
".External" "<Anonymous>" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" 
".External" "<Anonymous>" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" 
".External" "<Anonymous>" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" 
".External" "<Anonymous>" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" 
".External" "<Anonymous>" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" 
".External" "<Anonymous>" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" 
".External" "<Anonymous>" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" 
".External" "<Anonymous>" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" 
".External" "<Anonymous>" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" 
".External" "<Anonymous>" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" 
".External" "<Anonymous>" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" 
".External" "<Anonymous>" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" 
".External" "<Anonymous>" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" 
".External" "<Anonymous>" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" 
".External" "<Anonymous>" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" 
".External" "<Anonymous>" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" 
".External" "<Anonymous>" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" 
".External" "<Anonymous>" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" 
".External" "<Anonymous>" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" 
".External" "<Anonymous>" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" 
".External" "<Anonymous>" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" 
".External" "<Anonymous>" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" 
".External" "<Anonymous>" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" 
".External" "<Anonymous>" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" 
".External" "<Anonymous>" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" 
".External" "<Anonymous>" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" 
".External" "<Anonymous>" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" 
".External" "<Anonymous>" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" 
".External" "<Anonymous>" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" 
".External" "<Anonymous>" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" 
".External" "<Anonymous>" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" 
".External" "<Anonymous>" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" 
".External" "<Anonymous>" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" 
".External" "<Anonymous>" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" 
".External" "<Anonymous>" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" 
".External" "<Anonymous>" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" 
".External" "<Anonymous>" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" 
".External" "<Anonymous>" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" 
".External" "<Anonymous>" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" 
".External" "<Anonymous>" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" 
".External" "<Anonymous>" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" 
".External" "<Anonymous>" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" 
".External" "<Anonymous>" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" 
".External" "<Anonymous>" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"file.exists" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"fsub" "htmlify" "isBlankLineRd" "addParaBreaks" "writeLines" "writeLinesUTF8" "of1" "writeBlock" "writeContent" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"lapply" "find.package" "index.search" "help" "<Anonymous>" 
"grepl" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"psub" "htmlify" "isBlankLineRd" "addParaBreaks" "writeLines" "writeLinesUTF8" "of1" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
".External" "<Anonymous>" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" 
".deparseOpts" "deparse" "eval" "match.arg" "<Anonymous>" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" 
".External2" "plot.new" "plot.default" "plot.phylo" "plot" 
"text.default" "text" "plot.phylo" "plot" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"file.exists" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"grep" "isBlankLineRd" "addParaBreaks" "writeLines" "writeLinesUTF8" "of1" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"of1" "writeBlock" "writeContent" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"psub" "htmlify" "isBlankLineRd" "addParaBreaks" "writeLines" "writeLinesUTF8" "of1" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"unique" "simplify2array" "sapply" "RdTags" "writeContent" "writeWrapped" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"match" "%in%" "writeBlock" "writeContent" "writeWrapped" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"sub" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"read.dcf" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" ".read_description" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"psub" "htmlify" "isBlankLineRd" "addParaBreaks" "writeLines" "writeLinesUTF8" "of1" "writeBlock" "writeContent" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"RdTags" "writeContent" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"writeLines" "writeLinesUTF8" "of1" "writeBlock" "writeContent" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"psub" "htmlify" "isBlankLineRd" "addParaBreaks" "writeLines" "writeLinesUTF8" "of1" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"psub" "htmlify" "isBlankLineRd" "addParaBreaks" "writeLines" "writeLinesUTF8" "of1" "writeBlock" "writeContent" "writeHref" "writeLink" "writeBlock" "writeContent" "writeWrapped" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
".External2" "plot.new" "plot.default" "plot.phylo" 
"close.connection" "close" "save" "<Anonymous>" 
".External" "<Anonymous>" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"match" "structure" "grep" "isBlankRd" "writeWrapped" "writeBlock" "writeContent" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"regexpr" "withCallingHandlers" "suppressWarnings" "<Anonymous>" 
"find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"getOption" "gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"as.list" "lapply" "sapply" "RdTags" "get_link" "writeLink" "writeBlock" "writeContent" "writeWrapped" "writeBlock" "writeContent" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"grepl" "addParaBreaks" "writeLines" "writeLinesUTF8" "of1" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"close.connection" "close" "save" "<Anonymous>" 
".External" "<Anonymous>" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" 
".External" "<Anonymous>" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" 
"asNamespace" "getExportedValue" "::" "<Anonymous>" 
"standardGeneric" "diag" "f" 
"standardGeneric" "diag" "f" 
"f" 
"t" "mode" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "f" 
"<Anonymous>" "do.call" "try_params" "do.call" 
"nrow" "determinant.matrix" "determinant" "<Anonymous>" "do.call" 
"getNamespace" "asNamespace" "get" ":::" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "index.search" "help" "<Anonymous>" 
"file.exists" "index.search" "help" "<Anonymous>" 
"psub" "htmlify" "writeLines" "writeLinesUTF8" "of1" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"close.connection" "close" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"f" 
"f" 
".External2" "plot.new" "plot.default" "plot.phylo" "plot" 
".write.tree2" "write.tree" "read.tree" "pbtree" 
"dev" "objective" ".Call" "nlminb" "apeAce" "getPars" "make.simmap" 
".C" "matexpo" "dev" "objective" ".Call" "nlminb" "apeAce" "getPars" "make.simmap" 
".C" "matexpo" "dev" "objective" ".Call" "nlminb" "apeAce" "getPars" "make.simmap" 
"seq" "dev" "objective" ".Call" "nlminb" "apeAce" "getPars" "make.simmap" 
"matexpo" "dev" "objective" ".Call" "nlminb" "apeAce" "getPars" "make.simmap" 
"sch" "smap" "FUN" "lapply" "sapply" "replicate" "make.simmap" 
"c" "sch" "smap" "FUN" "lapply" "sapply" "replicate" "make.simmap" 
"$" "smap" "FUN" "lapply" "sapply" "replicate" "make.simmap" 
"sch" "smap" "FUN" "lapply" "sapply" "replicate" "make.simmap" 
"smap" "FUN" "lapply" "sapply" "replicate" "make.simmap" 
"sch" "smap" "FUN" "lapply" "sapply" "replicate" "make.simmap" 
"c" "sch" "smap" "FUN" "lapply" "sapply" "replicate" "make.simmap" 
"match" "rstate" "sch" "smap" "FUN" "lapply" "sapply" "replicate" "make.simmap" 
"match" "rstate" "sch" "smap" "FUN" "lapply" "sapply" "replicate" "make.simmap" 
"sch" "smap" "FUN" "lapply" "sapply" "replicate" "make.simmap" 
"c" "sch" "smap" "FUN" "lapply" "sapply" "replicate" "make.simmap" 
"smap" "FUN" "lapply" "sapply" "replicate" "make.simmap" 
"rstate" "sch" "smap" "FUN" "lapply" "sapply" "replicate" "make.simmap" 
"smap" "FUN" "lapply" "sapply" "replicate" "make.simmap" 
"c" "sch" "smap" "FUN" "lapply" "sapply" "replicate" "make.simmap" 
"match" "rstate" "sch" "smap" "FUN" "lapply" "sapply" "replicate" "make.simmap" 
"colnames" "match" "sch" "smap" "FUN" "lapply" "sapply" "replicate" "make.simmap" 
"smap" "FUN" "lapply" "sapply" "replicate" "make.simmap" 
"smap" "FUN" "lapply" "sapply" "replicate" "make.simmap" 
"eval" "FUN" "lapply" "strSub" "str.default" "str" "<Anonymous>" "do.call" "strSub" "str.default" "str" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" "eval" "eval" "withVisible" "evalVis" "capture.output" ".rs.valueFromStr" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" ".rs.valueContents" "<Anonymous>" 
".External2" "plot.new" "plot.default" "plot.phylo" "plot" 
"gzfile" "save" "<Anonymous>" 
"sys.parent" "sys.function" "formals" "match.arg" "format.default" "format" "format.fun" "paste" "formObj" "cat" "str.default" "str" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" "eval" "eval" "withVisible" "evalVis" "capture.output" ".rs.valueFromStr" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" ".rs.valueDescription" "<Anonymous>" 
"unlist" "rev" "FUN" "lapply" "sapply" "mv.Precalc" "mvSIM" 
"[" "regimeList" "FUN" "lapply" "sapply" "FUN" "lapply" "sapply" "mv.Precalc" "mvSIM" 
"[.factor" "[" "regimeList" "FUN" "lapply" "sapply" "FUN" "lapply" "sapply" "mv.Precalc" "mvSIM" 
"NextMethod" "[.factor" "[" "regimeList" "FUN" "lapply" "sapply" "FUN" "lapply" "sapply" "mv.Precalc" "mvSIM" 
"NextMethod" "[.factor" "[" "regimeList" "FUN" "lapply" "sapply" "FUN" "lapply" "sapply" "mv.Precalc" "mvSIM" 
"[.factor" "[" "regimeList" "FUN" "lapply" "sapply" "FUN" "lapply" "sapply" "mv.Precalc" "mvSIM" 
"regimeList" "FUN" "lapply" "sapply" "FUN" "lapply" "sapply" "mv.Precalc" "mvSIM" 
"regimeList" "FUN" "lapply" "sapply" "FUN" "lapply" "sapply" "mvOU2" 
"get" "getExportedValue" "::" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"order" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"getExportedValue" "::" "tcrossprod" "standardGeneric" "tcrossprod" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"order" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"colnames<-" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"lower.tri" "standardGeneric" "lower.tri" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "mode" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"diag" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"determinant.matrix" "<Anonymous>" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"nrow" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"rev" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"list" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"unlist" "order" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "as.matrix" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrix" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"asNamespace" "getExportedValue" "::" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"determinant.matrix" "<Anonymous>" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"mode" "data.class" "all.equal.character" "attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"rev" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"isBaseNamespace" "getExportedValue" "::" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"mode" "attr.all.equal" "all.equal.numeric" "all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.character" "attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrix" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "tcrossprod" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "unname" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"mode" "data.class" "all.equal.numeric" "all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.numeric" "all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"length" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"colnames<-" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.character" "::" "tcrossprod" "standardGeneric" "tcrossprod" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"data.class" "all.equal.character" "attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"get" "getExportedValue" "::" "tcrossprod" "standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attributes" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"<Anonymous>" "tcrossprod" "standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"mode" "attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.character" "attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.numeric" "all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"get" "getExportedValue" "::" "tcrossprod" "standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"row" "lower.tri" "standardGeneric" "lower.tri" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix.default" "as.matrix" "lower.tri" "standardGeneric" "lower.tri" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"array" "as.matrix.default" "as.matrix" "standardGeneric" "as.matrix" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"asNamespace" "getExportedValue" "::" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrix" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"asNamespace" "getExportedValue" "::" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrix" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"tcrossprod" "standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "mode" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"rev" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"determinant.matrix" "<Anonymous>" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"determinant.matrix" "<Anonymous>" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "mode" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"<Anonymous>" "tcrossprod" "standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "lower.tri" "standardGeneric" "lower.tri" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"seq_len" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attributes" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.character" "attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "unname" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"array" "as.matrix.default" "as.matrix" "standardGeneric" "as.matrix" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"<Anonymous>" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"asNamespace" "getExportedValue" "::" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"unname" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "lower.tri" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.vector" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"lapply" "unlist" "order" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "as.matrix" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "standardGeneric" "as.matrix" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "lower.tri" "standardGeneric" "lower.tri" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "lower.tri" "standardGeneric" "lower.tri" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"getExportedValue" "::" "tcrossprod" "standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"unname" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"$" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "lower.tri" "standardGeneric" "lower.tri" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"match.fun" "lapply" "unlist" "order" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.numeric" "all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"diag" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "mode" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "standardGeneric" "as.matrix" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"unlist" "order" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"mode" "attr.all.equal" "all.equal.numeric" "all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"mode" "attr.all.equal" "all.equal.numeric" "all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"is.factor" "order" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"get" "getExportedValue" "::" "tcrossprod" "standardGeneric" "tcrossprod" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.vector" "all.equal.numeric" "all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"oldClass" "data.class" "all.equal.character" "attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"unlist" "order" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrix" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"data.class" "all.equal.numeric" "all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"rev" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.numeric" "all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"asNamespace" "getExportedValue" "::" "tcrossprod" "standardGeneric" "tcrossprod" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.numeric" "all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"get" "getExportedValue" "::" "tcrossprod" "standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"print.default" "print" "standardGeneric" "print" "mvOU2" 
"rev" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"==" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "lower.tri" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"asNamespace" "getExportedValue" "::" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"mode" "attr.all.equal" "all.equal.numeric" "all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"rownames" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.numeric" "all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"*" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix.default" "as.matrix" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"determinant.matrix" "<Anonymous>" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"get" "getExportedValue" "::" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix.default" "as.matrix" "unname" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"determinant.matrix" "<Anonymous>" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"length" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"rownames" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"unlist" "order" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"diag" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"lower.tri" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"order" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix.default" "as.matrix" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"asNamespace" "getExportedValue" "::" "tcrossprod" "standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"diag" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.character" "attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"unname" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.numeric" "all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"seq_len" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"rev" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"rev" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"mode" "attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "mode" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "lower.tri" "standardGeneric" "lower.tri" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.character" "attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"diag" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"length" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"-" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"order" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"order" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "lower.tri" "standardGeneric" "lower.tri" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "lower.tri" "standardGeneric" "lower.tri" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "as.matrix" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrix" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"get" "getExportedValue" "::" "tcrossprod" "standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "lower.tri" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.character" "attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "unname" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"colnames<-" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix.default" "as.matrix" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"asNamespace" "getExportedValue" "::" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.numeric" "all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"rownames" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"<Anonymous>" "tcrossprod" "standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "tcrossprod" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"getExportedValue" "::" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "standardGeneric" "as.matrix" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"unname" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"isNamespace" "asNamespace" "getExportedValue" "::" "tcrossprod" "standardGeneric" "tcrossprod" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"lapply" "unlist" "order" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"seq_len" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t.default" "t" "standardGeneric" "t" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "as.matrix" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t.default" "t" "standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"lapply" "unlist" "order" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"determinant.matrix" "<Anonymous>" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "unname" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"asNamespace" "getExportedValue" "::" "tcrossprod" "standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"is.function" "match.fun" "lapply" "unlist" "order" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"<Anonymous>" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrix" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"order" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"tcrossprod" "standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"is.atomic" "array" "as.matrix.default" "as.matrix" "standardGeneric" "as.matrix" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "lower.tri" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"lower.tri" "standardGeneric" "lower.tri" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"ncol" "determinant.matrix" "<Anonymous>" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrix" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"tcrossprod" "standardGeneric" "tcrossprod" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"isBaseNamespace" "getExportedValue" "::" "tcrossprod" "standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"determinant.matrix" "<Anonymous>" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"array" "as.matrix.default" "as.matrix" "standardGeneric" "as.matrix" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.numeric" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "lower.tri" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"determinant.matrix" "<Anonymous>" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"mode" "attr.all.equal" "all.equal.character" "attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"determinant.matrix" "<Anonymous>" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"getExportedValue" "::" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t.default" "t" "standardGeneric" "t" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"rev" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"ncol" "determinant.matrix" "<Anonymous>" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix.default" "as.matrix" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix.default" "as.matrix" "standardGeneric" "as.matrix" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"is.factor" "order" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"-" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"mode" "data.class" "all.equal.numeric" "all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"data.class" "all.equal.character" "attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"$" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"rownames" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.numeric" "all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"standardGeneric" "as.matrix" "loglik_mvmorph" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"as.matrix" "lower.tri" "standardGeneric" "lower.tri" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"<Anonymous>" "tcrossprod" "standardGeneric" "tcrossprod" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"t" "standardGeneric" "t" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"t" "svd" "psmall.svd" "fast.svd" "pseudoinverse" "loglik_mvmorph" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"standardGeneric" "lower.tri" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"get0" "getCallingDLLe" ".Call" "loglik_mvmorph" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"as.matrix" "La.svd" "svd" "psmall.svd" "fast.svd" "pseudoinverse" "loglik_mvmorph" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"as.matrix" "La.svd" "svd" "psmall.svd" "fast.svd" "pseudoinverse" "loglik_mvmorph" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"unname" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"psmall.svd" "fast.svd" "pseudoinverse" "loglik_mvmorph" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"standardGeneric" "lower.tri" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"lapply" "unlist" "order" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"getCallingDLLe" ".Call" "loglik_mvmorph" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
".Call" "loglik_mvmorph" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"col" "lower.tri" "standardGeneric" "lower.tri" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"get" "getExportedValue" "::" "tcrossprod" "standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"pseudoinverse" "loglik_mvmorph" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"get" "getExportedValue" "::" "tcrossprod" "standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"mode" "attr.all.equal" "all.equal.numeric" "all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"t" "pseudoinverse" "loglik_mvmorph" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"t" "mode" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"La.svd" "svd" "psmall.svd" "fast.svd" "pseudoinverse" "loglik_mvmorph" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"list" "loglik_mvmorph" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"col" "lower.tri" "standardGeneric" "lower.tri" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"t" "standardGeneric" "t" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"lapply" "unlist" "order" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"lapply" "unlist" "order" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"get0" "getCallingDLLe" ".Call" "loglik_mvmorph" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"loglik_mvmorph" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"matrix" "La.svd" "svd" "psmall.svd" "fast.svd" "pseudoinverse" "loglik_mvmorph" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"loglik_mvmorph" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"getCallingDLLe" ".Call" "loglik_mvmorph" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"loglik_mvmorph" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"loglik_mvmorph" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"%*%" "psmall.svd" "fast.svd" "pseudoinverse" "loglik_mvmorph" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
".Call" "loglik_mvmorph" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"La.svd" "svd" "psmall.svd" "fast.svd" "pseudoinverse" "loglik_mvmorph" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"%*%" "loglik_mvmorph" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"attr.all.equal" "all.equal.numeric" "all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"as.matrix" "svd" "psmall.svd" "fast.svd" "pseudoinverse" "loglik_mvmorph" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"data.class" "all.equal.character" "attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"psmall.svd" "fast.svd" "pseudoinverse" "loglik_mvmorph" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"standardGeneric" "lower.tri" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"as.matrix" "unname" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"getNamespace" "asNamespace" "getExportedValue" "::" "tcrossprod" "standardGeneric" "tcrossprod" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"lapply" "unlist" "order" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"lapply" "unlist" "order" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"t" "standardGeneric" "t" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"as.matrix.default" "as.matrix" "standardGeneric" "as.matrix" "loglik_mvmorph" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"fast.svd" "pseudoinverse" "loglik_mvmorph" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
".Call" "loglik_mvmorph" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
".Call" "loglik_mvmorph" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"row" "lower.tri" "standardGeneric" "lower.tri" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"<Anonymous>" "tcrossprod" "standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"t.default" "t" "mode" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"standardGeneric" "tcrossprod" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"matrix" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"asNamespace" "getExportedValue" "::" "tcrossprod" "standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"diag" "psmall.svd" "fast.svd" "pseudoinverse" "loglik_mvmorph" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"getCallingDLLe" ".Call" "loglik_mvmorph" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"names" "unname" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"standardGeneric" "lower.tri" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"fast.svd" "pseudoinverse" "loglik_mvmorph" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
".Call" "loglik_mvmorph" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
".Call" "loglik_mvmorph" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"is.na" "all.equal.numeric" "all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"any" "svd" "psmall.svd" "fast.svd" "pseudoinverse" "loglik_mvmorph" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"list" "loglik_mvmorph" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"loglik_mvmorph" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"as.matrix.default" "as.matrix" "standardGeneric" "as.matrix" "loglik_mvmorph" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"La.svd" "svd" "psmall.svd" "fast.svd" "pseudoinverse" "loglik_mvmorph" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"psmall.svd" "fast.svd" "pseudoinverse" "loglik_mvmorph" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"standardGeneric" "tcrossprod" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"lapply" "unlist" "order" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"loglik_mvmorph" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"pseudoinverse" "loglik_mvmorph" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"pseudoinverse" "loglik_mvmorph" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"lapply" "unlist" "order" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"La.svd" "svd" "psmall.svd" "fast.svd" "pseudoinverse" "loglik_mvmorph" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"as.matrix" "lower.tri" "standardGeneric" "lower.tri" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"matrix" "La.svd" "svd" "psmall.svd" "fast.svd" "pseudoinverse" "loglik_mvmorph" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"matrix" "La.svd" "svd" "psmall.svd" "fast.svd" "pseudoinverse" "loglik_mvmorph" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"loglik_mvmorph" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"as.matrix" "lower.tri" "standardGeneric" "lower.tri" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"diag" "psmall.svd" "fast.svd" "pseudoinverse" "loglik_mvmorph" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
".Call" "loglik_mvmorph" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
">" "psmall.svd" "fast.svd" "pseudoinverse" "loglik_mvmorph" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"get" "getExportedValue" "::" "tcrossprod" "standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"matrix" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"attributes" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
".Call" "loglik_mvmorph" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"unlist" "order" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"as.matrix" "lower.tri" "standardGeneric" "lower.tri" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"La.svd" "svd" "psmall.svd" "fast.svd" "pseudoinverse" "loglik_mvmorph" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"tcrossprod" "standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"<Anonymous>" ".External2" "optim" "mvOU" 
"loglik_mvmorph" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"getNamespace" "asNamespace" "getExportedValue" "::" "tcrossprod" "standardGeneric" "tcrossprod" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"crossprod" "psmall.svd" "fast.svd" "pseudoinverse" "loglik_mvmorph" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"pseudoinverse" "loglik_mvmorph" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"psmall.svd" "fast.svd" "pseudoinverse" "loglik_mvmorph" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"La.svd" "svd" "psmall.svd" "fast.svd" "pseudoinverse" "loglik_mvmorph" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"%*%" "pseudoinverse" "loglik_mvmorph" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"attr.all.equal" "all.equal.numeric" "all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"rev" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"as.matrix" "unname" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"loglik_mvmorph" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"dim" "svd" "psmall.svd" "fast.svd" "pseudoinverse" "loglik_mvmorph" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"is.factor" "order" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"standardGeneric" "lower.tri" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"t" "pseudoinverse" "loglik_mvmorph" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"-" "loglik_mvmorph" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"FUN" "lapply" "unlist" "order" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"La.svd" "svd" "psmall.svd" "fast.svd" "pseudoinverse" "loglik_mvmorph" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
".Call" "loglik_mvmorph" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"La.svd" "svd" "psmall.svd" "fast.svd" "pseudoinverse" "loglik_mvmorph" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"psmall.svd" "fast.svd" "pseudoinverse" "loglik_mvmorph" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"as.integer" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
".Call" "loglik_mvmorph" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
"devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU" 
".getClassFromCache" "getClassDef" "is" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" ".rs.valueAsString" "<Anonymous>" 
"match.arg" "format.default" "format" "format.fun" "paste" "formObj" "cat" "str.default" "str" "<Anonymous>" "do.call" "strSub" "str.default" "str" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" "eval" "eval" "withVisible" "evalVis" "capture.output" ".rs.valueFromStr" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" ".rs.valueContents" "<Anonymous>" 
"getDescendants" "match" "<Anonymous>" "do.call" "try_params" "do.call" 
"+" "f" 
"try_params" "do.call" 
"getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "try_params" "do.call" 
"standardGeneric" "which" "<Anonymous>" "do.call" "try_params" "do.call" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"unlist" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"asNamespace" "get" ":::" "<Anonymous>" "prepare_Rd" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"psub" "htmlify" "isBlankLineRd" "addParaBreaks" "writeLines" "writeLinesUTF8" "of1" "writeBlock" "writeContent" "writeHref" "writeLink" "writeBlock" "writeContent" "writeWrapped" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "index.search" "help" "<Anonymous>" 
"fsub" "htmlify" "writeLines" "writeLinesUTF8" "of1" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" "sapply" ".rs.which" "sub" "<Anonymous>" 
"sub" "prettyNum" "format.default" "format" "format.fun" "paste" "formObj" "cat" "str.default" "str" "<Anonymous>" "do.call" "strSub" "str.default" "str" "<Anonymous>" "do.call" "strSub" "str.default" "str" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" "eval" "eval" "withVisible" "evalVis" "capture.output" ".rs.valueFromStr" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" ".rs.valueContents" "<Anonymous>" 
"eval" "FUN" "lapply" "strSub" "str.default" "str" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" "eval" "eval" "withVisible" "evalVis" "capture.output" ".rs.valueFromStr" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" ".rs.valueContents" "<Anonymous>" 
"str.default" "str" "<Anonymous>" "do.call" "strSub" "str.default" "str" "<Anonymous>" "do.call" "strSub" "str.default" "str" "<Anonymous>" "do.call" "strSub" "str.default" "str" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" "eval" "eval" "withVisible" "evalVis" "capture.output" ".rs.valueFromStr" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" ".rs.valueContents" "<Anonymous>" 
"str.default" "str" "<Anonymous>" "do.call" "strSub" "str.default" "str" "<Anonymous>" "do.call" "strSub" "str.default" "str" "<Anonymous>" "do.call" "strSub" "str.default" "str" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" "eval" "eval" "withVisible" "evalVis" "capture.output" ".rs.valueFromStr" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" ".rs.valueContents" "<Anonymous>" 
"str.default" "str" "<Anonymous>" "do.call" "strSub" "str.default" "str" "<Anonymous>" "do.call" "strSub" "str.default" "str" "<Anonymous>" "do.call" "strSub" "str.default" "str" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" "eval" "eval" "withVisible" "evalVis" "capture.output" ".rs.valueFromStr" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" ".rs.valueContents" "<Anonymous>" 
"c" "do.call" "strSub" "str.default" "str" "<Anonymous>" "do.call" "strSub" "str.default" "str" "<Anonymous>" "do.call" "strSub" "str.default" "str" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" "eval" "eval" "withVisible" "evalVis" "capture.output" ".rs.valueFromStr" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" ".rs.valueContents" "<Anonymous>" 
"gsub" "makeRegexpSafe" "sprintf" "grep" "findExactMatches" "findMatches" ".DollarNames.default" ".DollarNames" "specialOpCompletionsHelper" "specialCompletions" "<Anonymous>" "<Anonymous>" 
"eval" "FUN" "lapply" "strSub" "str.default" "str" "<Anonymous>" "do.call" "strSub" "str.default" "str" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" "eval" "eval" "withVisible" "evalVis" "capture.output" ".rs.valueFromStr" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" ".rs.valueContents" "<Anonymous>" 
"strtrim" "maybe_truncate" "str.default" "str" "<Anonymous>" "do.call" "strSub" "str.default" "str" "<Anonymous>" "do.call" "strSub" "str.default" "str" "<Anonymous>" "do.call" "strSub" "str.default" "str" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" "eval" "eval" "withVisible" "evalVis" "capture.output" ".rs.valueFromStr" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" ".rs.valueContents" "<Anonymous>" 
"get" ":::" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"exists" "FUN" "lapply" "sapply" ".rs.which" "sub" "<Anonymous>" 
"gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"file.path" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"grepl" "addParaBreaks" "writeLines" "writeLinesUTF8" "of1" "writeBlock" "writeContent" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"isTRUE" "enterPara" "writeWrapped" "writeBlock" "writeContent" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"paste0" "writeLines" "writeLinesUTF8" "of0" "writeWrapped" "writeBlock" "writeContent" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"close" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"gsub" ".Rd_format_title" "strwrap" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"writeLines" "writeLinesUTF8" "of0" "leavePara" "writeContent" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"fsub" "htmlify" "isBlankLineRd" "addParaBreaks" "writeLines" "writeLinesUTF8" "of1" "writeBlock" "writeContent" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"unique" "find.package" "index.search" "help" "<Anonymous>" 
"apply" "find.package" "index.search" "help" "<Anonymous>" 
"lapply" "unlist" "apply" "find.package" "index.search" "help" "<Anonymous>" 
"$" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "index.search" "help" "<Anonymous>" 
"close" "readRDS" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "<Anonymous>" "<Anonymous>" 
"[" "isBlankLineRd" "addParaBreaks" "writeLines" "writeLinesUTF8" "of1" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"as.character" "toupper" "paste0" "FUN" "vapply" "urlify" "paste0" "writeLink" "writeBlock" "writeContent" "writeWrapped" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"list" "apply" "find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"Rd2txt_options" "Rd2txt" "tryCatchList" "tryCatch" ".Rd_get_text" ".Rd_get_title" "gsub" ".Rd_format_title" "strwrap" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"apply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"close.connection" "close" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"unlist" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"rbind" "do.call" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"gzfile" "read.dcf" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" ".read_description" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"grepl" "put" "putw" "writeBlock" "Rd2txt" "tryCatchList" "tryCatch" ".Rd_get_text" ".Rd_get_title" "gsub" ".Rd_format_title" "strwrap" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"grep" "isBlankLineRd" "addParaBreaks" "writeLines" "writeLinesUTF8" "of1" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"deparse" "eval" "match.arg" "trimws" "testRdConditional" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"grep" "ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"unlist" "unique" "simplify2array" "sapply" "RdTags" ".Rd_get_section" ".Rd_get_title" "gsub" ".Rd_format_title" "strwrap" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"unlist" "unique" "simplify2array" "sapply" "RdTags" "writeContent" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"close.connection" "close" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"close.connection" "close" "save" "<Anonymous>" 
"is" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" ".rs.valueDescription" "<Anonymous>" 
"as.environment" "get" "<Anonymous>" 
"match" "%in%" "structure" "object.size" "<Anonymous>" 
"match" "%in%" ".deparseOpts" "deparse" "eval" "match.arg" "sink" "capture.output" ".rs.valueFromStr" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" ".rs.valueDescription" "<Anonymous>" 
".rs.scalar" "<Anonymous>" 
"inFunction" "<Anonymous>" "<Anonymous>" 
"doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" ".rs.valueDescription" "<Anonymous>" 
".External" "<Anonymous>" 
".External" "png" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" 
".External" "<Anonymous>" 
".External" "<Anonymous>" 
"doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" ".rs.valueDescription" "<Anonymous>" 
".rs.scalar" "<Anonymous>" 
"stdout" "cat" "str.default" "str" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" "eval" "eval" "withVisible" "evalVis" "capture.output" ".rs.valueFromStr" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" ".rs.valueDescription" "<Anonymous>" 
"sub" "prettyNum" "format.default" "format" "format.fun" "paste" "formObj" "cat" "str.default" "str" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" "eval" "eval" "withVisible" "evalVis" "capture.output" ".rs.valueFromStr" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" ".rs.valueDescription" "<Anonymous>" 
"match.fun" "strOptions" "stopifnot" "modifyList" "str.default" "str" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" "eval" "eval" "withVisible" "evalVis" "capture.output" ".rs.valueFromStr" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" ".rs.valueDescription" "<Anonymous>" 
"tryCatchOne" "tryCatchList" "tryCatch" ".rs.getSingleClass" "<Anonymous>" 
"<Anonymous>" 
"substr" "str.default" "str" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" "eval" "eval" "withVisible" "evalVis" "capture.output" ".rs.valueFromStr" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" ".rs.valueDescription" "<Anonymous>" 
"deparse" "eval" "match.arg" "format.default" "format" "format.fun" "paste" "formObj" "cat" "str.default" "str" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" "eval" "eval" "withVisible" "evalVis" "capture.output" ".rs.valueFromStr" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" ".rs.valueDescription" "<Anonymous>" 
"class<-" ".rs.scalar" "<Anonymous>" 
"doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" ".rs.valueDescription" "<Anonymous>" 
"doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" ".rs.getSingleClass" "<Anonymous>" 
"pmatch" ".deparseOpts" "deparse" "textConnection" "capture.output" ".rs.valueFromStr" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" ".rs.valueDescription" "<Anonymous>" 
"deparse" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" ".rs.valueAsString" "<Anonymous>" 
"get" ":::" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" ".rs.getSingleClass" "<Anonymous>" 
".rs.valueAsString" "<Anonymous>" 
"<Anonymous>" 
"lapply" "unlist" "order" 
"deparse" "eval" "match.arg" "sink" "capture.output" ".rs.valueFromStr" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" ".rs.valueAsString" "<Anonymous>" 
"get" ":::" "<Anonymous>" 
"tryCatch" "try" "eval" "eval" "withVisible" "evalVis" "capture.output" ".rs.valueFromStr" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" ".rs.valueDescription" "<Anonymous>" 
"pmatch" "match.arg" "prettyNum" "format.default" "format" "format.fun" "paste" "formObj" "cat" "str.default" "str" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" "eval" "eval" "withVisible" "evalVis" "capture.output" ".rs.valueFromStr" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" ".rs.valueAsString" "<Anonymous>" 
"grep" "ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "<Anonymous>" "<Anonymous>" 
"existsInFrame" "<Anonymous>" "lazyLoadDBfetch" "fetch" "fun" "lazyLoadDBexec" "<Anonymous>" "<Anonymous>" "prepare_Rd" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"writeLines" "writeLinesUTF8" "of1" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"writeLines" "writeLinesUTF8" "of1" "writeBlock" "writeContent" "writeContent" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"psub" "htmlify" "isBlankLineRd" "addParaBreaks" "writeLines" "writeLinesUTF8" "of1" "writeBlock" "writeContent" "writeContent" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"grepl" "addParaBreaks" "writeLines" "writeLinesUTF8" "of1" "writeBlock" "writeContent" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"isBlankLineRd" "addParaBreaks" "writeLines" "writeLinesUTF8" "of1" "writeBlock" "writeContent" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"grepl" "addParaBreaks" "writeLines" "writeLinesUTF8" "of1" "writeBlock" "writeContent" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"isBlankLineRd" "addParaBreaks" "writeLines" "writeLinesUTF8" "of1" "writeBlock" "writeContent" "writeContent" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"file.path" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"writeWrapped" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"as.character" "pmatch" ".deparseOpts" "deparse" "textConnection" "capture.output" ".rs.valueFromStr" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" ".rs.valueAsString" "<Anonymous>" 
"pmatch" ".deparseOpts" "deparse" "mode" "capture.output" ".rs.valueFromStr" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" ".rs.valueAsString" "<Anonymous>" 
"is.matrix" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" ".rs.valueDescription" "<Anonymous>" 
".External" "<Anonymous>" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" 
"save" "<Anonymous>" 
".deparseOpts" "deparse" "paste" "force" "as.data.frame.numeric" "as.data.frame" "data.frame" "inFunction" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"environment" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "help" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "index.search" "help" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"grep" "ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
".Rd_get_title" "gsub" ".Rd_format_title" "strwrap" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"psub" "htmlify" "isBlankLineRd" "addParaBreaks" "writeLines" "writeLinesUTF8" "of1" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"close.connection" "close" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"structure" "object.size" "<Anonymous>" 
"prettyNum" "format.default" "format" "format.fun" "paste" "formObj" "cat" "str.default" "str" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" "eval" "eval" "withVisible" "evalVis" "capture.output" ".rs.valueFromStr" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" ".rs.valueAsString" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"unlist" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"sub" "data.frame" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"levels" "rbind" "rbind" "rbindSome" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"unlist" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"deparse" "as.data.frame.character" "as.data.frame" "data.frame" ".methods_info" ".S4methodsForGeneric" "<Anonymous>" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"close.connection" "close" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"all" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"cp" "add.internal" "add.internal" ".write.tree2" "write.tree" "read.tree" "pbtree" 
"match" "hasArg" "make.simmap" 
"$" "dev" "objective" ".Call" "nlminb" "apeAce" "getPars" "make.simmap" 
"structure" "simpleMessage" "message" "printmessage" "make.simmap" 
"<" "expm.Higham08" "<Anonymous>" "MatrixExp" "expm" "smap" "FUN" "lapply" "sapply" "replicate" "make.simmap" 
"format" "format.fun" "paste" "formObj" "cat" "str.default" "str" "<Anonymous>" "do.call" "strSub" "str.default" "str" "<Anonymous>" "do.call" "strSub" "str.default" "str" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" "eval" "eval" "withVisible" "evalVis" "capture.output" ".rs.valueFromStr" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" ".rs.valueContents" "<Anonymous>" 
"levels" "as.character.factor" "FUN" "FUN" "lapply" "unlist" "rev" "FUN" "lapply" "mv.Precalc" "mvSIM" 
"all.equal.numeric" "all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"length" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"<Anonymous>" "tcrossprod" "standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"tcrossprod" "standardGeneric" "tcrossprod" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "standardGeneric" "as.matrix" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"determinant.matrix" "<Anonymous>" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"lapply" "unlist" "order" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "lower.tri" "standardGeneric" "lower.tri" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"list" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t.default" "t" "standardGeneric" "t" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"lower.tri" "standardGeneric" "lower.tri" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.character" "attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"rev" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"determinant.matrix" "<Anonymous>" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "as.matrix" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"dim" "nrow" "diag" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"floor" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.character" "attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"mode" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"array" "as.matrix.default" "as.matrix" "standardGeneric" "as.matrix" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrix" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"lower.tri" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"names" "unname" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"mode" "data.class" "all.equal.character" "attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "as.matrix" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"determinant.matrix" "<Anonymous>" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"colnames<-" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "unname" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"::" "tcrossprod" "standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"mode" "attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "as.matrix" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "lower.tri" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrix" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "lower.tri" "standardGeneric" "lower.tri" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix.default" "as.matrix" "standardGeneric" "as.matrix" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"mode" "attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"is.call" "mode" "attr.all.equal" "all.equal.character" "attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"::" "tcrossprod" "standardGeneric" "tcrossprod" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "unname" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"determinant.matrix" "<Anonymous>" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"$" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"asNamespace" "getExportedValue" "::" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"isNamespace" "asNamespace" "getExportedValue" "::" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"get" "getExportedValue" "::" "tcrossprod" "standardGeneric" "tcrossprod" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"match" "structure" "object.size" "<Anonymous>" 
"as.vector" "factor" "as.factor" "FUN" "lapply" "mvOU2" 
"standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t.default" "t" "standardGeneric" "t" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t.default" "t" "standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrix" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"determinant.matrix" "<Anonymous>" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"getNamespace" "asNamespace" "getExportedValue" "::" "tcrossprod" "standardGeneric" "tcrossprod" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "lower.tri" "standardGeneric" "lower.tri" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"matrix" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "unname" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "as.matrix" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"colnames<-" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"get" "getExportedValue" "::" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"%*%" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"tcrossprod" "standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "lower.tri" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.vector" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"lower.tri" "standardGeneric" "lower.tri" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "lower.tri" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "lower.tri" "standardGeneric" "lower.tri" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.numeric" "all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"is.null" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"is.call" "mode" "attr.all.equal" "all.equal.character" "attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"dim" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"$" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"data.class" "all.equal.numeric" "all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"determinant.matrix" "<Anonymous>" "determinant" "standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "mode" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"order" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.vector" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"rownames" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "tcrossprod" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"mode" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "lower.tri" "standardGeneric" "lower.tri" "sym.par" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "t" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"order" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "determinant" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "mode" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
".Call" "ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"as.matrix" "solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"standardGeneric" "tcrossprod" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"is.na" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"is.na" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"is.na" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"is.na" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"is.na" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"is.na" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"is.na" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"is.na" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"is.na" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"ou_fun_matrix" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"order" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"t" "standardGeneric" "t" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"attr.all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "matrixParam" "buildA" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"solve.default" "solve" "standardGeneric" "solve" "loglik_mvmorph2" "devianc" "fn" "<Anonymous>" ".External2" "optim" "mvOU2" 
"substr" "str.default" "str" "<Anonymous>" "do.call" "strSub" "str.default" "str" "<Anonymous>" "do.call" "strSub" "str.default" "str" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" "eval" "eval" "withVisible" "evalVis" "capture.output" ".rs.valueFromStr" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" ".rs.valueContents" "<Anonymous>" 
"structure" "object.size" "<Anonymous>" 
"methodsPackageMetaName" "classMetaName" "getClassDef" "is" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" ".rs.valueDescription" "<Anonymous>" 
"text.default" "text" "plot.phylo" "plot" 
"<Anonymous>" 
":" "f" 
"f" 
"f" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"file.exists" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"sys.function" "match.call" "stopifnot" "head.default" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"unlist" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"rbind" "do.call" "find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "index.search" "help" "<Anonymous>" 
"getOption" "gzfile" "readRDS" "index.search" "help" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"apply" "find.package" "index.search" "help" "<Anonymous>" 
"prod" "apply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" "sapply" ".rs.which" "sub" "<Anonymous>" 
"file.exists" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"grepl" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"file.exists" "index.search" "help" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"sub" "data.frame" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"grep" "[.data.frame" "[" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"file.exists" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "index.search" "help" "<Anonymous>" 
"close" "readRDS" "index.search" "help" "<Anonymous>" 
"<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"sub" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"grepl" "find.package" "index.search" "help" "<Anonymous>" 
"close" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"isNamespaceLoaded" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "index.search" "help" "<Anonymous>" 
"lapply" "unlist" "unique" "simplify2array" "sapply" "data.frame" "inFunction" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"unlist" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"find.package" "index.search" "help" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"pmatch" ".deparseOpts" "deparse" "as.data.frame.character" "as.data.frame" "data.frame" ".methods_info" ".S4methodsForGeneric" "<Anonymous>" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"close.connection" "close" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"unlist" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"deparse" "paste" "force" "as.data.frame.numeric" "as.data.frame" "data.frame" "inFunction" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"sub" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"deparse" "FUN" "lapply" ".rs.recordTraceback" "<Anonymous>" "solve.default" "solve" "<Anonymous>" "do.call" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"tryCatchOne" "tryCatchList" "tryCatch" "try" "as.character.srcref" "as.character" "as.character" "print.function" "print" "standardGeneric" "print" 
"str.default" "str" "<Anonymous>" "do.call" "strSub" "str.default" "str" "<Anonymous>" "do.call" "strSub" "str.default" "str" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" "eval" "eval" "withVisible" "evalVis" "capture.output" ".rs.valueFromStr" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" ".rs.valueDescription" "<Anonymous>" 
"list" "FUN" "lapply" "do.call" "strSub" "str.default" "str" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" "eval" "eval" "withVisible" "evalVis" "capture.output" ".rs.valueFromStr" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" ".rs.valueContents" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "<Anonymous>" "do.call" 
"*" "f" 
"f" 
"%*%" "f" 
"<Anonymous>" "do.call" "try_params" "do.call" 
"getDescendants" "match" "<Anonymous>" "do.call" "try_params" "do.call" 
"getDescendants" "match" "get_edge_mat" "try_params" "do.call" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "get_edge_mat" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "get_edge_mat" 
"str.default" "str" "<Anonymous>" "do.call" "strSub" "str.default" "str" "<Anonymous>" "do.call" "strSub" "str.default" "str" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" "eval" "eval" "withVisible" "evalVis" "capture.output" ".rs.valueFromStr" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" ".rs.valueDescription" "<Anonymous>" 
"gregexpr" "withCallingHandlers" "suppressWarnings" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
".rs.scalar" "FUN" "lapply" ".rs.recordTraceback" "<Anonymous>" "<Anonymous>" "do.call" "try_params" 
"+" "f" "try_params" 
"f" "try_params" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"sub" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"aperm" "apply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "<Anonymous>" "<Anonymous>" 
"grep" "isBlankLineRd" "addParaBreaks" "writeLines" "writeLinesUTF8" "of1" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"psub" "addParaBreaks" "writeLines" "writeLinesUTF8" "of1" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"grep" "isBlankLineRd" "addParaBreaks" "writeLines" "writeLinesUTF8" "of1" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"sub" "data.frame" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"unlist" "apply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"unlist" "unique" "simplify2array" "sapply" "RdTags" "writeContent" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"match" "writeWrapped" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"writeLines" "writeLinesUTF8" "of1" "writeBlock" "writeContent" "writeWrapped" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"sub" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"file.path" "file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"exists" "FUN" "lapply" "sapply" ".rs.which" "sub" "<Anonymous>" 
"file.exists" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"getOption" "gzfile" "readRDS" "index.search" "help" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"sub" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"unique" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"as.data.frame.vector" "as.data.frame.character" "as.data.frame" "data.frame" ".methods_info" ".S4methodsForGeneric" "<Anonymous>" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"exists" "FUN" "lapply" "sapply" ".rs.which" "sub" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"exists" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"exists" "FUN" "lapply" "sapply" ".rs.which" "sub" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"c" "match.arg" "sort.list" "[.data.frame" "[" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"exists" "FUN" "lapply" "sapply" ".rs.which" "sub" "<Anonymous>" 
"file.exists" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "index.search" "help" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"apply" "find.package" "index.search" "help" "<Anonymous>" 
"find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"unlist" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"getNamespace" "asNamespace" ".getNamespaceInfo" "find.package" "index.search" "help" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"body" "isUME" "findGeneric" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"as.data.frame.integer" "as.data.frame" "data.frame" "inFunction" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"unlist" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
".getNamespaceInfo" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"unlist" "apply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"unlist" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"FUN" "lapply" "strwrap" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"psub" "addParaBreaks" "writeLines" "writeLinesUTF8" "of1" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"of0" "enterPara" "writeWrapped" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"grep" "ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"sub" "data.frame" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"unique" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "index.search" "help" "<Anonymous>" 
"grep" "inFunction" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"unique" "find.package" "index.search" "help" "<Anonymous>" 
"close" "readRDS" "index.search" "help" "<Anonymous>" 
"<Anonymous>" "lazyLoadDBfetch" "fetch" "fun" "lazyLoadDBexec" "<Anonymous>" "<Anonymous>" "prepare_Rd" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"grep" "isBlankLineRd" "addParaBreaks" "writeLines" "writeLinesUTF8" "of1" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"psub" "htmlify" "isBlankLineRd" "addParaBreaks" "writeLines" "writeLinesUTF8" "of1" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"close.connection" "close" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"grep" "[.data.frame" "[" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"apply" "find.package" "index.search" "help" "<Anonymous>" 
"apply" "find.package" "index.search" "help" "<Anonymous>" 
"close.connection" "close" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "index.search" "help" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"sub" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"close.connection" "close" "readRDS" "index.search" "help" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"grepl" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"sub" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"grep" "ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"sys.function" "match.call" "stopifnot" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"aperm" "apply" "find.package" "index.search" "help" "<Anonymous>" 
"grepl" "find.package" "index.search" "help" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"sub" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"unique" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" ".rs.valueDescription" "<Anonymous>" 
"which" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "getDescendants" "match" "convert_to_cov" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"$" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"close" "readRDS" "index.search" "help" "<Anonymous>" 
"match" "structure" "grep" "isBlankRd" "writeWrapped" "writeBlock" "writeContent" "writeBlock" "writeContent" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"grepl" "get_link" "writeLink" "writeBlock" "writeContent" "writeWrapped" "writeBlock" "writeContent" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"close" "readRDS" "index.search" "help" "<Anonymous>" 
"close.connection" "close" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"unique.default" "unique" "find.package" "index.search" "help" "<Anonymous>" 
"lapply" "unlist" "apply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"length" "dim.data.frame" "dim" "dim" "nrow" "inFunction" "<Anonymous>" "<Anonymous>" 
"deparse" "mode" "match" "%in%" "deparse" "paste" "force" "as.data.frame.numeric" "as.data.frame" "data.frame" "inFunction" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"paste0" "str.default" "str" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" "eval" "eval" "withVisible" "evalVis" "capture.output" ".rs.valueFromStr" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" ".rs.valueDescription" "<Anonymous>" 
"is" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" ".rs.valueDescription" "<Anonymous>" 
"%in%" "deparse" "eval" "match.arg" "match" "textConnection" "capture.output" ".rs.valueFromStr" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" ".rs.valueAsString" "<Anonymous>" 
"tryCatchList" "tryCatch" "FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"sub" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"match" "possibleExtends" "is" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" ".rs.valueAsString" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"tryCatchOne" "tryCatchList" "tryCatch" "FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"unlist" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"readRDS" "<Anonymous>" "<Anonymous>" 
"writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"sub" "data.frame" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" "sapply" ".rs.which" "sub" "<Anonymous>" 
"grepl" "find.package" "index.search" "help" "<Anonymous>" 
"deparse" "FUN" "lapply" ".rs.recordTraceback" "<Anonymous>" "solve.default" "solve" "<Anonymous>" "do.call" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"close" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"sub" "data.frame" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"close.connection" "close" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"unlist" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"exists" "FUN" "lapply" "sapply" ".rs.which" "sub" "<Anonymous>" 
"gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"match" "%in%" "structure" ".MethodsFunction" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "index.search" "help" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "index.search" "help" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"data.frame" ".methods_info" ".S4methodsForGeneric" "<Anonymous>" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" "sapply" ".rs.which" "sub" "<Anonymous>" 
"file.exists" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"apply" "find.package" "index.search" "help" "<Anonymous>" 
"getOption" "gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"sub" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"lapply" "unlist" "apply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"close" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
".getClassFromCache" "getClassDef" "<Anonymous>" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"close" "readRDS" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "index.search" "help" "<Anonymous>" 
"getNamespace" "asNamespace" ".getNamespaceInfo" "find.package" "index.search" "help" "<Anonymous>" 
"find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
".getNamespaceInfo" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"close.connection" "close" "readRDS" "index.search" "help" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"sub" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "index.search" "help" "<Anonymous>" 
"lapply" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"lapply" "find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"grepl" "find.package" "index.search" "help" "<Anonymous>" 
"close.connection" "close" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "index.search" "help" "<Anonymous>" 
"FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "index.search" "help" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"as.list" "data.frame" "inFunction" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"grep" "[.data.frame" "[" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"NextMethod" "[.factor" "[" "[.data.frame" "[" ".MethodsFunction" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"close" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"any" "apply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"index.search" "help" "<Anonymous>" 
"read.dcf" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" ".read_description" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"getKnownS3generics" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"unlist" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"sub" "data.frame" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"grep" "ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "<Anonymous>" "<Anonymous>" 
"close.connection" "close" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"sub" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"psub" "htmlify" "isBlankLineRd" "addParaBreaks" "writeLines" "writeLinesUTF8" "of1" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"unique" "simplify2array" "sapply" "RdTags" "writeContent" "writeHref" "writeLink" "writeBlock" "writeContent" "writeWrapped" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"lapply" "unlist" "order" "make.names" "data.frame" ".methods_info" ".S4methodsForGeneric" "<Anonymous>" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"grepl" "find.package" "index.search" "help" "<Anonymous>" 
"close.connection" "close" "readRDS" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"<Anonymous>" "lazyLoadDBfetch" "fetch" "fun" "lazyLoadDBexec" "<Anonymous>" "<Anonymous>" "prepare_Rd" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"psub" "addParaBreaks" "writeLines" "writeLinesUTF8" "of1" "writeBlock" "writeContent" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"psub" "htmlify" "isBlankLineRd" "addParaBreaks" "writeLines" "writeLinesUTF8" "of1" "writeBlock" "writeContent" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"leavePara" "writeContent" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"psub" "htmlify" "isBlankLineRd" "addParaBreaks" "writeLines" "writeLinesUTF8" "of1" "writeBlock" "writeContent" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"close.connection" "close" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"<Anonymous>" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"close.connection" "close" "readRDS" "index.search" "help" "<Anonymous>" 
"getExportedValue" "::" "mime_canonical_encoding" "paste0" "writeLines" "writeLinesUTF8" "of0" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"grep" "isBlankRd" "writeWrapped" "writeBlock" "writeContent" "writeBlock" "writeContent" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"match" "%in%" "structure" "grep" "isBlankRd" "writeWrapped" "writeBlock" "writeContent" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"is.na" "apply" "find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "index.search" "help" "<Anonymous>" 
"structure" ".POSIXct" "file.info" "file_test" ".read_description" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"match" "%in%" "writeContent" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"match" "%in%" "writeContent" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"match" "%in%" "structure" "grep" "isBlankRd" "writeWrapped" "writeBlock" "writeContent" "writeBlock" "writeContent" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"strsplit" "unlist" "urlify" "paste0" "writeLink" "writeBlock" "writeContent" "writeWrapped" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"apply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"tryCatch" "help" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"file.path" "find.package" "index.search" "help" "<Anonymous>" 
"find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"grep" "isBlankRd" "writeWrapped" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"grep" "[.data.frame" "[" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"unique.default" "unique" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"unlist" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"unique" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"sub" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"grep" "ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"exists" "FUN" "lapply" "sapply" ".rs.which" "sub" "<Anonymous>" 
"gzfile" "readRDS" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"sub" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"sub" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"[.data.frame" "[" ".MethodsFunction" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"apply" "find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"close" "readRDS" "index.search" "help" "<Anonymous>" 
"do.call" "find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"is.na" "apply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"unlist" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"exists" "FUN" "lapply" "sapply" ".rs.which" "sub" "<Anonymous>" 
"gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "index.search" "help" "<Anonymous>" 
"lapply" "sapply" "RdTags" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"sub" "data.frame" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"isNamespace" "asNamespace" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"file.exists" "index.search" "help" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" "sapply" ".rs.which" "sub" "<Anonymous>" 
"exists" "FUN" "lapply" "sapply" ".rs.which" "sub" "<Anonymous>" 
"file.path" "file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"sub" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"grepl" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"apply" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "index.search" "help" "<Anonymous>" 
"get_edge_mat" "f2" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"match.fun" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "index.search" "help" "<Anonymous>" 
"grepl" "get_link" "writeLink" "writeBlock" "writeContent" "writeWrapped" "writeBlock" "writeContent" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"lapply" "sapply" "RdTags" "get_link" "writeLink" "writeBlock" "writeContent" "writeWrapped" "writeBlock" "writeContent" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"%in%" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"grep" "isBlankRd" "writeWrapped" "writeBlock" "writeContent" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"unique.default" "unique" "simplify2array" "sapply" "RdTags" "writeContent" "writeHref" "writeLink" "writeBlock" "writeContent" "writeWrapped" "writeBlock" "writeContent" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"close.connection" "close" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"psub" "htmlify" "isBlankLineRd" "addParaBreaks" "writeLines" "writeLinesUTF8" "of1" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"close.connection" "close" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"apply" "find.package" "index.search" "help" "<Anonymous>" 
"find.package" "index.search" "help" "<Anonymous>" 
"asNamespace" ".getNamespaceInfo" "find.package" "index.search" "help" "<Anonymous>" 
"close" "readRDS" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"match.arg" "sink" ".Rd_get_text" ".Rd_get_title" "gsub" ".Rd_format_title" "strwrap" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"str.default" "str" "<Anonymous>" "do.call" "strSub" "str.default" "str" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" "eval" "eval" "withVisible" "evalVis" "capture.output" ".rs.valueFromStr" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" ".rs.valueDescription" "<Anonymous>" 
"which" "getDescendants" "match" "get_edge_mat" "f2" "apply" 
"deparse" "FUN" "lapply" ".rs.recordTraceback" "<Anonymous>" "solve.default" "solve" "<Anonymous>" "do.call" 
"parse" "eval" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "tryToEval" "specialOpCompletionsHelper" "specialCompletions" "<Anonymous>" "<Anonymous>" 
"sapply" "inFunction" "<Anonymous>" "<Anonymous>" 
"which" "getDescendants" "getDescendants" "getDescendants" "match" "get_edge_mat" "f2" 
".deparseOpts" "deparse" "mode" "match" "%in%" "deparse" "FUN" "lapply" ".rs.recordTraceback" "<Anonymous>" "solve.default" "solve" "<Anonymous>" "do.call" 
"standardGeneric" "upper.tri" "f2" 
"solve.default" "solve" "<Anonymous>" "do.call" 
"*" "f" 
"getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "try_params" "do.call" 
"getDescendants" "getDescendants" "match" "<Anonymous>" "do.call" "try_params" "do.call" 
"grep" "ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"t" "mode" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" 
"is" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" ".rs.valueDescription" "<Anonymous>" 
"%*%" "f" 
"f" 
"f" 
"f" 
"diag" "f" 
"standardGeneric" "t" "f" 
"f" 
"f" 
"t" "standardGeneric" "t" "f" 
"f" 
"f" 
"data.frame" "inFunction" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"file.exists" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"data.frame" "inFunction" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"sub" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"$<-.data.frame" "$<-" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"close.connection" "close" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"apply" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "index.search" "help" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"sub" "data.frame" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" "unlist" "apply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"any" "apply" "find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "index.search" "help" "<Anonymous>" 
"file.info" "file_test" ".read_description" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"grepl" "addParaBreaks" "writeLines" "writeLinesUTF8" "of1" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"psub" "htmlify" "isBlankLineRd" "addParaBreaks" "writeLines" "writeLinesUTF8" "of1" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"psub" "htmlify" "paste0" "writeLines" "writeLinesUTF8" "of0" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"data.frame" "inFunction" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"as.list" "data.frame" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"file.path" "file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"unique.default" "unique" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"match.fun" "apply" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"file.path" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"grepl" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "index.search" "help" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"unlist" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"sub" "data.frame" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"grepl" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"sub" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"dim" "dim" "nrow" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"sub" "data.frame" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "index.search" "help" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"grep" "ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"exists" "FUN" "lapply" "sapply" ".rs.which" "sub" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"aperm" "apply" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "index.search" "help" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"close" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"sub" "data.frame" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"close.connection" "close" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"as.data.frame" "data.frame" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"grepl" "find.package" "index.search" "help" "<Anonymous>" 
"find.package" "index.search" "help" "<Anonymous>" 
"file.path" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"unique.default" "unique" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"file.exists" "index.search" "help" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"sub" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"match" "%in%" "deparse" "as.data.frame.character" "as.data.frame" "data.frame" ".methods_info" ".S4methodsForGeneric" "<Anonymous>" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "index.search" "help" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"duplicated.default" "duplicated" ".MethodsFunction" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"grep" "ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"grepl" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"<=" "convert_to_cov" 
"eval" "FUN" "lapply" "strSub" "str.default" "str" "<Anonymous>" "do.call" "strSub" "str.default" "str" "<Anonymous>" "do.call" "strSub" "str.default" "str" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" "eval" "eval" "withVisible" "evalVis" "capture.output" ".rs.valueFromStr" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" ".rs.valueContents" "<Anonymous>" 
"cat" "str.default" "str" "<Anonymous>" "do.call" "strSub" "str.default" "str" "<Anonymous>" "do.call" "strSub" "str.default" "str" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" "eval" "eval" "withVisible" "evalVis" "capture.output" ".rs.valueFromStr" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" ".rs.valueContents" "<Anonymous>" 
"sub" "prettyNum" "format.default" "format" "format.fun" "paste" "formObj" "cat" "str.default" "str" "<Anonymous>" "do.call" "strSub" "str.default" "str" "<Anonymous>" "do.call" "strSub" "str.default" "str" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" "eval" "eval" "withVisible" "evalVis" "capture.output" ".rs.valueFromStr" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" ".rs.valueContents" "<Anonymous>" 
"sys.function" "formals" "str.default" "str" "<Anonymous>" "do.call" "strSub" "str.default" "str" "<Anonymous>" "do.call" "strSub" "str.default" "str" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" "eval" "eval" "withVisible" "evalVis" "capture.output" ".rs.valueFromStr" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" ".rs.valueContents" "<Anonymous>" 
"eval" "match.arg" "format.default" "format" "format.fun" "paste" "formObj" "cat" "str.default" "str" "<Anonymous>" "do.call" "strSub" "str.default" "str" "<Anonymous>" "do.call" "strSub" "str.default" "str" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" "eval" "eval" "withVisible" "evalVis" "capture.output" ".rs.valueFromStr" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" ".rs.valueContents" "<Anonymous>" 
"sub" "prettyNum" "format.default" "format" "format.fun" "paste" "formObj" "cat" "str.default" "str" "<Anonymous>" "do.call" "strSub" "str.default" "str" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" "eval" "eval" "withVisible" "evalVis" "capture.output" ".rs.valueFromStr" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" ".rs.valueContents" "<Anonymous>" 
"strsplit" "prettyNum" "format.default" "format" "format.fun" "paste" "formObj" "cat" "str.default" "str" "<Anonymous>" "do.call" "strSub" "str.default" "str" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" "eval" "eval" "withVisible" "evalVis" "capture.output" ".rs.valueFromStr" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" ".rs.valueContents" "<Anonymous>" 
"getOption" "str.default" "str" "<Anonymous>" "do.call" "strSub" "str.default" "str" "<Anonymous>" "do.call" "strSub" "str.default" "str" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" "eval" "eval" "withVisible" "evalVis" "capture.output" ".rs.valueFromStr" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" ".rs.valueContents" "<Anonymous>" 
"match.fun" "strOptions" "stopifnot" "modifyList" "str.default" "str" "<Anonymous>" "do.call" "strSub" "str.default" "str" "<Anonymous>" "do.call" "strSub" "str.default" "str" "<Anonymous>" "do.call" "strSub" "str.default" "str" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" "eval" "eval" "withVisible" "evalVis" "capture.output" ".rs.valueFromStr" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" ".rs.valueContents" "<Anonymous>" 
".rs.attemptRoxygenTagCompletion" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"apply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"unlist" "<Anonymous>" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"sub" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"%in%" ".deparseOpts" "deparse" "as.data.frame.character" "as.data.frame" "data.frame" ".methods_info" ".S4methodsForGeneric" "<Anonymous>" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" "sapply" ".rs.which" "sub" "<Anonymous>" 
"aperm" "apply" "find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"sub" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"getOption" "gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"aperm" "apply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "<Anonymous>" "<Anonymous>" 
"gzfile" "readRDS" "<Anonymous>" "<Anonymous>" 
"gzfile" "readRDS" "<Anonymous>" "<Anonymous>" 
"gzfile" "read.dcf" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" ".read_description" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"lazyLoadDBfetch" "fetch" "fun" "lazyLoadDBexec" "<Anonymous>" "<Anonymous>" "prepare_Rd" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"writeLines" "WriteLines" "flushBuffer" "blankLine" "Rd2txt" "tryCatchList" "tryCatch" ".Rd_get_text" ".Rd_get_title" "gsub" ".Rd_format_title" "strwrap" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"psub" "htmlify" "isBlankLineRd" "addParaBreaks" "writeLines" "writeLinesUTF8" "of1" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"deparse" "eval" "match.arg" "match" "textConnection" "capture.output" ".rs.getSignature" "<Anonymous>" 
"doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"unlist" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"unlist" "apply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "index.search" "help" "<Anonymous>" 
"close.connection" "close" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"sub" "data.frame" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"grepl" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"sub" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"unique" "find.package" "index.search" "help" "<Anonymous>" 
"sys.function" "match.call" "stopifnot" "head.default" "<Anonymous>" "<Anonymous>" 
"sub" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"as.environment" "ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"close" "readRDS" "index.search" "help" "<Anonymous>" 
"close.connection" "close" "readRDS" "index.search" "help" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"sub" "data.frame" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"unique.default" "unique" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "index.search" "help" "<Anonymous>" 
"close.connection" "close" "readRDS" "index.search" "help" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"sub" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" "sapply" ".rs.which" "sub" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"sub" "data.frame" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"unlist" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"sub" "data.frame" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"close" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"close" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"as.list" "lapply" "sapply" "RdTags" "writeContent" "writeBlock" "writeContent" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"paste" "get_link" "writeLink" "writeBlock" "writeContent" "writeWrapped" "writeBlock" "writeContent" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"unique.default" "unique" "simplify2array" "sapply" "RdTags" "writeContent" "writeBlock" "writeContent" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"close.connection" "close" "readRDS" "index.search" "help" "<Anonymous>" 
"writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"writeBlock" "writeContent" "writeBlock" "writeContent" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"psub" "htmlify" "isBlankLineRd" "addParaBreaks" "writeLines" "writeLinesUTF8" "of1" "writeBlock" "writeContent" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"rbind" "do.call" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"paste" "<Anonymous>" "<Anonymous>" 
"grepl" "find.package" "index.search" "help" "<Anonymous>" 
"lazyLoadDBfetch" "fetch" "fun" "lazyLoadDBexec" "<Anonymous>" "<Anonymous>" "prepare_Rd" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"grep" "ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"grepl" "find.package" "index.search" "help" "<Anonymous>" 
"unique" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"readRDS" "<Anonymous>" "<Anonymous>" 
"[" "addParaBreaks" "writeLines" "writeLinesUTF8" "of1" "writeBlock" "writeContent" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"leavePara" "writeContent" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"unlist" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"unique.default" "unique" "factor" "as.data.frame.character" "as.data.frame" "data.frame" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"close.connection" "close" "readRDS" "index.search" "help" "<Anonymous>" 
"file.exists" "index.search" "help" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "system.file" "<Anonymous>" "<Anonymous>" 
"psub" "htmlify" "isBlankLineRd" "addParaBreaks" "writeLines" "writeLinesUTF8" "of1" "writeBlock" "writeContent" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"grep" "isBlankRd" "writeWrapped" "writeBlock" "writeContent" "writeBlock" "writeContent" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"psub" "htmlify" "isBlankLineRd" "addParaBreaks" "writeLines" "writeLinesUTF8" "of1" "writeBlock" "writeContent" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"match" "%in%" "[[.data.frame" "[[" "$.data.frame" "$" "order" "[.data.frame" "[" "inFunction" "<Anonymous>" "<Anonymous>" 
"sub" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "index.search" "help" "<Anonymous>" 
"match" "%in%" "structure" "prepare_Rd" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"aperm" "apply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"close.connection" "close" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"close" "readRDS" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"NextMethod" "[.factor" "[" "[.data.frame" "[" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"file.path" "file.exists" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"do.call" "find.package" "index.search" "help" "<Anonymous>" 
"close.connection" "close" "readRDS" "index.search" "help" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"match.fun" "lapply" "unlist" "unique" "simplify2array" "sapply" "data.frame" "inFunction" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"unlist" "<Anonymous>" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"unlist" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "index.search" "help" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"sub" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"unlist" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"aperm" "apply" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "index.search" "help" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"unlist" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"aperm" "apply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"file.path" "file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "index.search" "help" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"sub" "data.frame" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "index.search" "help" "<Anonymous>" 
"gregexpr" "withCallingHandlers" "suppressWarnings" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"sub" "data.frame" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"sub" "data.frame" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"unlist" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"close.connection" "close" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"sub" "data.frame" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"tryCatch" "FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"unlist" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"sub" "data.frame" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "index.search" "help" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"[.data.frame" "[" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"grep" "ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"sub" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"file.exists" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"getOption" "gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"close.connection" "close" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "index.search" "help" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"%in%" "deparse" "mode" "match" "%in%" "deparse" "as.data.frame.character" "as.data.frame" "data.frame" ".methods_info" ".S4methodsForGeneric" "<Anonymous>" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"gzfile" "readRDS" "index.search" "help" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"unlist" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"sub" "data.frame" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"unique" "find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"file.path" "file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"file.path" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"unique" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "index.search" "help" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"unlist" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"grep" "ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"exists" "FUN" "lapply" "sapply" ".rs.which" "sub" "<Anonymous>" 
"exists" "FUN" "lapply" "sapply" ".rs.which" "sub" "<Anonymous>" 
"lapply" "unlist" "apply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "index.search" "help" "<Anonymous>" 
"close.connection" "close" "readRDS" "<Anonymous>" "<Anonymous>" 
"of0" "writeWrapped" "writeBlock" "writeContent" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"sapply" "RdTags" "writeContent" "writeHref" "writeLink" "writeBlock" "writeContent" "writeWrapped" "writeBlock" "writeContent" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"asNamespace" ".getNamespaceInfo" "find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "<Anonymous>" "<Anonymous>" 
"sapply" "RdTags" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"grepl" ".rs.attemptRoxygenTagCompletion" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"file.path" "file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"psub" "htmlify" "isBlankLineRd" "addParaBreaks" "writeLines" "writeLinesUTF8" "of1" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"unlist" "apply" "find.package" "index.search" "help" "<Anonymous>" 
"close.connection" "close" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"unique" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"psub" "htmlify" "isBlankLineRd" "addParaBreaks" "writeLines" "writeLinesUTF8" "of1" "writeBlock" "writeContent" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"unlist" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"gsub" ".Rd_format_title" "strwrap" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"writeBlock" "writeContent" "writeWrapped" "writeBlock" "writeContent" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"simplify2array" "sapply" "RdTags" "writeContent" "writeLR" "writeBlock" "writeContent" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"c" "apply" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "index.search" "help" "<Anonymous>" 
"getFromFrame" "<Anonymous>" "lazyLoadDBfetch" "fetch" "fun" "lazyLoadDBexec" "<Anonymous>" "<Anonymous>" "prepare_Rd" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"htmlify" "isBlankLineRd" "addParaBreaks" "writeLines" "writeLinesUTF8" "of1" "writeBlock" "writeContent" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"as.list" "lapply" "sapply" "RdTags" "writeContent" "writeHref" "writeLink" "writeBlock" "writeContent" "writeWrapped" "writeBlock" "writeContent" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"grepl" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "index.search" "help" "<Anonymous>" 
"grep" "isBlankRd" "writeWrapped" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"grepl" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"close" "readRDS" "index.search" "help" "<Anonymous>" 
"rbind" "do.call" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"gsub" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"lapply" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"aperm" "apply" "find.package" "index.search" "help" "<Anonymous>" 
"lapply" "unlist" "apply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"grep" "isBlankLineRd" "addParaBreaks" "writeLines" "writeLinesUTF8" "of1" "writeBlock" "writeContent" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"apply" "find.package" "index.search" "help" "<Anonymous>" 
"is.factor" "unique.default" "unique" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"paste0" "FUN" "vapply" "urlify" "paste0" "writeLink" "writeBlock" "writeContent" "writeWrapped" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"sys.parent" "sys.call" "match.call" "stopifnot" "head.default" "<Anonymous>" "<Anonymous>" 
"asNamespace" "get" ":::" "<Anonymous>" 
"grep" "ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"file.path" "file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "index.search" "help" "<Anonymous>" 
"structure" ".Rd_get_section" ".Rd_get_title" "gsub" ".Rd_format_title" "strwrap" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"psub" "htmlify" "isBlankLineRd" "addParaBreaks" "writeLines" "writeLinesUTF8" "of1" "writeBlock" "writeContent" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"%in%" "writeContent" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"apply" "find.package" "index.search" "help" "<Anonymous>" 
"rbind" "do.call" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"<Anonymous>" "lazyLoadDBfetch" "fetch" "fun" "lazyLoadDBexec" "<Anonymous>" "<Anonymous>" "prepare_Rd" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"fsub" "htmlify" "isBlankLineRd" "addParaBreaks" "writeLines" "writeLinesUTF8" "of1" "writeBlock" "writeContent" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"grep" "isBlankRd" "writeWrapped" "writeBlock" "writeContent" "writeBlock" "writeContent" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"index.search" "help" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"match" "structure" "grep" "isBlankRd" "writeWrapped" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"close.connection" "close" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "index.search" "help" "<Anonymous>" 
"match" "%in%" "writeBlock" "writeContent" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"pruningwise.distFromRoot" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"close.connection" "close" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"lazyLoadDBfetch" "fetch" "fun" "lazyLoadDBexec" "<Anonymous>" "<Anonymous>" "prepare_Rd" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"writeWrapped" "writeBlock" "writeContent" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"fsub" "vhtmlify" "writeLines" "writeLinesUTF8" "of1" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"$" "pruningwise.distFromRoot" 
"solve.default" "solve" "<Anonymous>" "do.call" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"str.default" "str" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" "eval" "eval" "withVisible" "evalVis" "capture.output" ".rs.valueFromStr" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" ".rs.valueDescription" "<Anonymous>" 
"convert_to_cov2" "FUN" "apply" 
"matrix" "f" 
".deparseOpts" "deparse" "mode" "capture.output" ".rs.valueFromStr" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" ".rs.valueDescription" "<Anonymous>" 
"getNamespace" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"rbind" "do.call" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "index.search" "help" "<Anonymous>" 
"lazyLoadDBfetch" "fetch" "fun" "lazyLoadDBexec" "<Anonymous>" "<Anonymous>" "prepare_Rd" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"writeLines" "writeLinesUTF8" "of0" "writeWrapped" "writeBlock" "writeContent" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"psub" "htmlify" "isBlankLineRd" "addParaBreaks" "writeLines" "writeLinesUTF8" "of1" "writeBlock" "writeContent" "writeBlock" "writeContent" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "index.search" "help" "<Anonymous>" 
"unlist" "head.default" "isInsideQuotes" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"sub" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"$<-.data.frame" "$<-" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"is.function" "match.fun" "apply" "find.package" "index.search" "help" "<Anonymous>" 
"unique.default" "unique" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "index.search" "help" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"sub" "data.frame" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"sub" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"lapply" "sapply" "RdTags" "writeSection" "Rd2HTML" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"sub" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"make.names" "data.frame" "inFunction" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"unlist" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "index.search" "help" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"file.path" "file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "index.search" "help" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"unlist" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"file.path" "find.package" "index.search" "help" "<Anonymous>" 
"close.connection" "close" "readRDS" "index.search" "help" "<Anonymous>" 
"file.exists" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"aperm.default" "aperm" "apply" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"lapply" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"apply" "find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "index.search" "help" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"unlist" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"apply" "find.package" "index.search" "help" "<Anonymous>" 
"close" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "index.search" "help" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"do.call" "find.package" "index.search" "help" "<Anonymous>" 
"close.connection" "close" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"file.path" "find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"deparse" "paste" "force" "as.data.frame.integer" "as.data.frame" "data.frame" "inFunction" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"sub" "data.frame" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"getNamespace" "asNamespace" ".getNamespaceInfo" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"close" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"rbind" "do.call" "find.package" "index.search" "help" "<Anonymous>" 
"unique" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "index.search" "help" "<Anonymous>" 
"close.connection" "close" "readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"length" "find.package" "index.search" "help" "<Anonymous>" 
"c" "apply" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "index.search" "help" "<Anonymous>" 
"close.connection" "close" "readRDS" "index.search" "help" "<Anonymous>" 
"find.package" "index.search" "help" "<Anonymous>" 
"$" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"match.fun" "lapply" "unlist" "apply" "find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "index.search" "help" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"sub" "data.frame" ".S3methods" "methods" "doTryCatch" "tryCatchOne" "tryCatchList" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"ls" "match" "%in%" "find" "getAnywhere" "<Anonymous>" "do.call" "FUN" "lapply" "unlist" "unique" "functionArgs" "<Anonymous>" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"unlist" "apply" "find.package" "index.search" "help" "<Anonymous>" 
"apply" "find.package" "index.search" "help" "<Anonymous>" 
"close" "readRDS" "index.search" "help" "<Anonymous>" 
"file.exists" "find.package" "index.search" "help" "<Anonymous>" 
"$" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"readRDS" "FUN" "lapply" "find.package" "index.search" "help" "<Anonymous>" 
"gzfile" "readRDS" "index.search" "help" "<Anonymous>" 
"is.call" "mode" "data.class" "all.equal.numeric" "all.equal" "all.equal.list" "all.equal" "attr.all.equal" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "eigen" "f2" 
"f2" 
"unique" "simplify2array" "sapply" "data.frame" "inFunction" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"ls" "apropos" "normalCompletions" "<Anonymous>" "<Anonymous>" 
"FUN" "lapply" "inFunction" "<Anonymous>" "<Anonymous>" 
"file.exists" ".packages" "match" "%in%" ".rs.isPackageInstalled" "<Anonymous>" 
"save" "<Anonymous>" 
